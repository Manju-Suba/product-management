{"version":3,"file":"static/js/365.ea73a2d4.chunk.js","mappings":"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","sources":["constant/EventEmitter.js","views/flow/AddFlow.js","views/flow/EditFlow.js","views/flow/FlowList.js","views/svgImages/BackArrowSvg.js","views/svgImages/DeleteSvg.js","views/svgImages/EditSvg.js"],"sourcesContent":["import { EventEmitter } from 'eventemitter3'\n\nconst eventEmitter = new EventEmitter()\n\nexport default eventEmitter\n","import React, { useState, useRef } from 'react'\nimport { CCol, CRow, CButton, CForm, CFormLabel, CFormInput } from '@coreui/react'\nimport PropTypes from 'prop-types'\nimport { ImageUrl, getDecodeData, getHeaders } from '../../constant/Global'\nimport { toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport profileImage1 from '../../assets/images/avatars/man1.png'\nimport trashIcon from '../../assets/images/form/trash-icon.png'\nimport { Breadcrumb, Button, Select } from 'antd'\nimport BackArrowSvg from 'src/views/svgImages/BackArrowSvg'\nimport useAxios from 'src/constant/UseAxios'\nimport Downarrowimg from '../../assets/images/downarrow.png'\nimport { toPascalCase } from '../../constant/TimeUtils'\nimport { Link } from 'react-router-dom'\n\nconst AddFlow = ({ userData, prodList, close }) => {\n  let api = useAxios()\n  const user = getDecodeData()\n  const [selectedApprovals, setSelectedApprovals] = useState([])\n  const [formErrors, setFormErrors] = useState({\n    accessTo: '',\n    approvalBy: [], // Change from array to object\n    flow: '',\n  })\n  const [approvalFlows, setApprovalFlows] = useState([{}])\n  const [selectedValues, setSelectedValues] = useState([null])\n  const formRef = useRef(null)\n  const [flowName, setFlowName] = useState('')\n  const [selectedAccessValue, setSelectedAccessValue] = useState([])\n  const [loadings, setLoadings] = useState(false)\n  const options = userData.map((user) => ({\n    value: user.id,\n    label: (\n      <div className=\"select-options select-options-approval\">\n        <img\n          src={user.profile_pic ? ImageUrl + user.profile_pic : profileImage1}\n          style={user.profile_pic ? { width: '29px', borderRadius: '14px' } : { width: '39px' }}\n          alt={user.name}\n          className=\"img-flag\"\n        />\n        <div className=\"node1\" style={user.profile_pic ? { marginLeft: '11px' } : {}}>\n          <p className=\"user-name1\" title={user.name}>\n            {toPascalCase(user.name)}\n          </p>\n          <p className=\"role-text1\">{user.role}</p>\n        </div>\n      </div>\n    ),\n  }))\n\n  const options1 = prodList.map((user) => ({\n    value: user.id,\n    label: (\n      <div className=\"select-options select-options-approval\">\n        <img\n          src={user.profile_pic ? ImageUrl + user.profile_pic : profileImage1}\n          style={user.profile_pic ? { width: '29px', borderRadius: '14px' } : { width: '39px' }}\n          alt={user.name}\n          className=\"img-flag\"\n        />\n        <div className=\"node1\" style={user.profile_pic ? { marginLeft: '11px' } : {}}>\n          <p className=\"user-name1_opction\" title={user.name}>\n            {toPascalCase(user.name)}{' '}\n          </p>\n          <p className=\"role-text1\">{user.role}</p>\n        </div>\n      </div>\n    ),\n  }))\n\n  const handleAccessChange = (selectedOptions) => {\n    setSelectedAccessValue((prevSelectedAccessValue) => {\n      if (selectedOptions && selectedOptions.length > 0) {\n        const newValues = selectedOptions.map((option) => ({\n          id: Number(option.value),\n          name: prodList.find((user) => user.id === option.value)?.name || '',\n        }))\n        return newValues\n      } else {\n        return []\n      }\n    })\n  }\n\n  const removeApprovalFlow = (index) => {\n    if (index !== 0) {\n      setFormErrors((prevErrors) => {\n        const newErrors = { ...prevErrors }\n        if (newErrors.approvalBy && newErrors.approvalBy[index]) {\n          newErrors.approvalBy[index] = ''\n        }\n        return newErrors\n      })\n      setApprovalFlows((prevApprovalFlows) => {\n        const updatedFlows = [...prevApprovalFlows]\n        updatedFlows.splice(index, 1)\n        return updatedFlows\n      })\n\n      setSelectedApprovals((prevSelectedApprovals) => {\n        const updatedApprovals = [...prevSelectedApprovals]\n        updatedApprovals.splice(index, 1)\n        return updatedApprovals\n      })\n\n      setSelectedValues((prevSelectedApprovals) => {\n        const updatedApprovals = [...prevSelectedApprovals]\n        updatedApprovals.splice(index, 1)\n        return updatedApprovals\n      })\n    }\n  }\n\n  const handleApprovalSelectChange = (selectedOption, index) => {\n    if (selectedOption) {\n      const newValue = selectedOption\n      setSelectedApprovals((prevSelectedApprovals) => {\n        const updatedApprovals = [...prevSelectedApprovals]\n        updatedApprovals[index] = {\n          id: Number(newValue),\n          name: userData.find((user) => user.id === newValue)?.name || '',\n        }\n        return updatedApprovals\n      })\n    } else {\n      // Handle the case when the selection is cleared\n      setSelectedApprovals((prevSelectedApprovals) => {\n        const updatedApprovals = [...prevSelectedApprovals]\n        updatedApprovals[index] = null\n        return updatedApprovals\n      })\n    }\n  }\n\n  const addApprovalFlow = () => {\n    setApprovalFlows([...approvalFlows, {}])\n    setSelectedValues([...selectedValues, null])\n  }\n\n  const validateForm = () => {\n    const errors = {\n      accessTo: '',\n      approvalBy: [],\n      flow: '',\n    }\n\n    // Validate Flow Name\n    if (!flowName.trim()) {\n      errors.flow = 'Please Enter Flow Name'\n    }\n\n    // Validate Access To (multi-select)\n    if (!selectedAccessValue || selectedAccessValue.length === 0) {\n      errors.accessTo = 'Please Select at Least One Option'\n    }\n\n    // Validate Approval Flows\n    if (approvalFlows.length !== 0) {\n      approvalFlows.forEach((data, index) => {\n        if (selectedApprovals[index] === undefined || selectedApprovals[index] === null) {\n          // Push the error message to the array\n          errors.approvalBy[index] = 'Please Select an Approval'\n        }\n      })\n    }\n\n    setFormErrors(errors)\n\n    // Check for any errors in the validation\n    const hasErrors =\n      errors.flow !== '' ||\n      errors.accessTo !== '' ||\n      errors.approvalBy.some((error) => error !== '')\n\n    return !hasErrors\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    const isFormValid = validateForm()\n    if (isFormValid) {\n      setLoadings(true)\n      const userId = user.id\n      const postData = {\n        name: flowName,\n        access_to: selectedAccessValue,\n        approval_by: selectedApprovals,\n        created_by: userId,\n      }\n      const url = `flow/create`\n      await api\n        .post(url, postData, {\n          headers: getHeaders('json'),\n        })\n        .then((response) => {\n          toast.success(response.data.message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n            autoClose: 3000,\n          })\n          setLoadings(false)\n          resetModal()\n        })\n        .catch((error) => {\n          const errors = error.response\n          setLoadings(false)\n          if (errors.status === 409) {\n            toast.error(errors.data.message, {\n              position: toast.POSITION.BOTTOM_RIGHT,\n              autoClose: 3000,\n            })\n          } else {\n            toast.error(error.message, {\n              position: toast.POSITION.BOTTOM_RIGHT,\n              autoClose: 3000,\n            })\n          }\n        })\n    }\n  }\n\n  const resetModal = () => {\n    setSelectedAccessValue([])\n    setApprovalFlows([{}])\n    setSelectedApprovals([])\n    setSelectedValues([null])\n    setFlowName('')\n    if (formRef.current) {\n      formRef.current.reset()\n    }\n    const errors = {\n      accessTo: '',\n      approvalBy: [],\n      flow: '',\n    }\n    setFormErrors(errors)\n    close()\n  }\n\n  const onInputChange = (e) => {\n    const { value } = e.target\n\n    const re = /^[A-Za-z0-9\\s-]*$/\n\n    if (re.test(value)) {\n      setFlowName(value)\n    }\n  }\n\n  return (\n    <CCol xs={12} className=\"card flowlist-main-card product_card_flow\">\n      <CRow>\n        <CCol sm={1} style={{ width: '20px' }} className=\"backarrow_content\">\n          <span style={{ cursor: 'pointer', marginRight: '2px' }} onClick={close}>\n            <BackArrowSvg width=\"16\" height=\"15\" viewBox=\"0 0 18 18\" fill=\"#A5A1A1\" />\n          </span>\n        </CCol>\n        <CCol style={{ marginLeft: '20px' }}>\n          <h6 className=\"draft-heading-flow\" style={{ marginTop: '3%' }}>\n            Create New Flow\n          </h6>\n          <Breadcrumb\n            className=\"bread-tab\"\n            separator={<span className=\"breadcrumb-separator\">|</span>}\n            items={[\n              {\n                title: (\n                  <Link\n                    rel=\"Dashboard\"\n                    to={'/dashboard'}\n                    className=\"bread-items text-decoration-none text-secondary \"\n                  >\n                    Dashboard\n                  </Link>\n                ),\n              },\n              {\n                title: (\n                  <span\n                    className=\"bread-items text-secondary second-subheading\"\n                    style={{ cursor: 'pointer' }}\n                    onClick={resetModal}\n                  >\n                    Flow List\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <span className=\"text-secondary second-subheading\" style={{ cursor: 'default' }}>\n                    Create New Flow\n                  </span>\n                ),\n              },\n            ]}\n          />\n          {/* <CCol xs={12} className=\"edit_flow_body\" style={{ marginLeft: '34px', width: '99%' }}> */}\n          <CForm className=\"mt-3 needs-validation\" noValidate onSubmit={handleSubmit} ref={formRef}>\n            <CRow gutter={16}>\n              <CCol sm={3} span={6}>\n                <div className=\"label-field-container\">\n                  <CFormLabel className=\"approval-title\" htmlFor=\"validationCustom01\">\n                    Name of the Flow <span className=\"red-text1\">*</span>\n                  </CFormLabel>\n                  <CFormInput\n                    className=\"form-input flow-name-input\"\n                    type=\"text\"\n                    id=\"validationCustom01\"\n                    placeholder=\"Enter Flow Name\"\n                    feedbackInvalid=\"Please provide a Flow Name.\"\n                    required\n                    value={flowName}\n                    maxLength={48}\n                    onChange={onInputChange}\n                  />\n                </div>\n                <span className=\"text-danger nameflow-error \">{formErrors.flow}</span>\n              </CCol>\n              <CCol sm={9} span={6}>\n                <div className=\"label-field-container\">\n                  <CFormLabel className=\"approval-title-acc\" htmlFor=\"validationCustom01\">\n                    Access Persons <span className=\"red-text1\">*</span>\n                  </CFormLabel>\n                  <Select\n                    className=\"form-custom-selects access-input-box approval_select\"\n                    value={\n                      selectedAccessValue\n                        ? options1.filter((option) =>\n                            selectedAccessValue.some((selected) => selected.id === option.value),\n                          )\n                        : null\n                    }\n                    options={options1}\n                    onChange={handleAccessChange}\n                    required\n                    showSearch\n                    placeholder=\"Choose Access Persons\"\n                    allowClear\n                    mode=\"multiple\"\n                    variant={'borderless'}\n                    filterOption={(input, option) => {\n                      const userNameArray =\n                        option.label.props.children[1].props.children[0].props.children\n                      const userName = userNameArray[0]\n                      const lowerCaseInput = input.toLowerCase()\n                      const lowerCaseUserName = userName.toLowerCase()\n                      return lowerCaseUserName.includes(lowerCaseInput)\n                    }}\n                    suffixIcon={\n                      <img\n                        src={Downarrowimg}\n                        alt=\"Downarrowimg\"\n                        style={{ width: '10px', height: '6px' }}\n                      />\n                    }\n                    maxTagCount=\"responsive\"\n                    labelInValue={(option) => (\n                      <div className=\"select-options select-options-approval\">\n                        <img\n                          src={option.profile_pic ? ImageUrl + option.profile_pic : profileImage1}\n                          style={\n                            option.profile_pic\n                              ? { width: '29px', borderRadius: '14px' }\n                              : { width: '39px' }\n                          }\n                          alt={option.value}\n                          className=\"img-flag\"\n                        />\n                        <div\n                          className=\"node1\"\n                          style={option.profile_pic ? { marginLeft: '11px' } : {}}\n                        >\n                          <p className=\"user-name1\">{option.value}</p>\n                          <p className=\"role-text1\">{option.label.role}</p>\n                        </div>\n                      </div>\n                    )}\n                  />\n                </div>\n                <span className=\"text-danger nameflow-error \">{formErrors.accessTo}</span>\n              </CCol>\n            </CRow>\n            <CRow>\n              <CCol sm={9} className=\"approval-title\" style={{ marginTop: '40px' }}>\n                Approval Flow <span className=\"red-text1\">*</span>\n              </CCol>\n            </CRow>\n            <CRow gutter={12} className=\"approval-body\">\n              {approvalFlows.map((flow, index) => {\n                const filteredOptions = options.filter(\n                  (option) => !selectedValues.includes(option.value),\n                )\n                const filteredApprovalOptions = filteredOptions.filter(\n                  (option) =>\n                    !selectedAccessValue ||\n                    !selectedAccessValue.some((selected) => selected.id === option.value),\n                )\n\n                return (\n                  <CCol\n                    sm={6}\n                    md={3}\n                    className=\"Edit_approval_selct\"\n                    style={{ marginTop: '15px' }}\n                    key={index}\n                  >\n                    <div className=\"approval-flow-list-input\">\n                      <CFormLabel\n                        className=\"form-label text-c approval-title-inputbox\"\n                        htmlFor={`approvalSelect-${index}`}\n                      >\n                        Approval {index + 1}\n                      </CFormLabel>\n                      <div className=\"select-approval-flow\">\n                        <Select\n                          className=\"form-custom-selects approval-input-box approval_select\"\n                          value={\n                            selectedValues[index] !== undefined\n                              ? options.find((option) => option.value === selectedValues[index]) ||\n                                null\n                              : null\n                          }\n                          variant={'borderless'}\n                          suffixIcon={\n                            <img\n                              src={Downarrowimg}\n                              alt=\"Downarrowimg\"\n                              style={{ width: '10px', height: '6px' }}\n                            />\n                          }\n                          placeholder=\"Choose Person\"\n                          onChange={(selectedValue) => {\n                            const updatedValues = [...selectedValues]\n                            updatedValues[index] = selectedValue\n                            setSelectedValues(updatedValues)\n\n                            handleApprovalSelectChange(selectedValue, index)\n                          }}\n                          required\n                          showSearch\n                          filterOption={(input, option) => {\n                            const userNameArray =\n                              option &&\n                              option.children.props.children[1].props.children[0].props.children\n                            const userName = userNameArray\n                            const lowerCaseInput = input.toLowerCase()\n                            const lowerCaseUserName = userName.toLowerCase()\n                            return lowerCaseUserName.includes(lowerCaseInput)\n                          }}\n                          allowClear\n                        >\n                          {filteredApprovalOptions.map((option) => (\n                            <Select.Option key={option.value} value={option.value}>\n                              {option.label}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      </div>\n                      {formErrors.approvalBy[index] && (\n                        <span className=\"text-danger approval-error-msg mx-1\">\n                          {formErrors.approvalBy[index]}\n                        </span>\n                      )}\n                      {index !== 0 && (\n                        <button\n                          className=\"text-decoration-none border-0 mt-2 add-row float-end delete-apporval-field\"\n                          onClick={() => removeApprovalFlow(index)}\n                        >\n                          <div className=\"delete_image\">\n                            <img\n                              src={trashIcon}\n                              alt=\"trash\"\n                              style={{ width: '12px', height: '13px' }}\n                            />\n                          </div>\n                        </button>\n                      )}\n                    </div>\n                  </CCol>\n                )\n              })}\n              <CCol sm={3}>\n                <button\n                  className=\"text-decoration-none border-0 add-row d-flex  add-row-flowlist\"\n                  onClick={addApprovalFlow}\n                  type=\"button\"\n                >\n                  {' '}\n                  <span style={{ fontSize: '15px', marginRight: '2px' }}> </span> Add Approval\n                </button>\n              </CCol>\n            </CRow>\n            <CRow className=\"m-3\">\n              <CCol sm={6}></CCol>\n              <CCol sm={6} className=\"d-flex justify-content-end align-items-center\">\n                <CButton className=\"cancel-btn text-c  \" onClick={close}>\n                  Cancel\n                </CButton>\n                <Button\n                  className=\"crt-submit-button flow-btn save_changes \"\n                  style={{ fontSize: '13px', color: 'white' }}\n                  htmlType=\"submit\"\n                  loading={loadings}\n                >\n                  Submit\n                </Button>\n              </CCol>\n            </CRow>\n          </CForm>\n        </CCol>\n\n        {/* </CCol> */}\n      </CRow>\n    </CCol>\n  )\n}\nAddFlow.propTypes = {\n  userData: PropTypes.array.isRequired,\n  prodList: PropTypes.array.isRequired,\n  close: PropTypes.func,\n}\nexport default AddFlow\n","import React, { useState, useRef, useEffect } from 'react'\nimport { CCol, CRow, CButton, CForm, CFormLabel, CFormInput } from '@coreui/react'\nimport PropTypes from 'prop-types'\nimport { ImageUrl, getDecodeData, getHeaders } from '../../constant/Global'\nimport { toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport profileImage1 from '../../assets/images/avatars/man1.png'\nimport trashIcon from '../../assets/images/form/trash-icon.png'\nimport { Breadcrumb, Button, Select } from 'antd'\nimport BackArrowSvg from 'src/views/svgImages/BackArrowSvg'\nimport useAxios from 'src/constant/UseAxios'\nimport Downarrowimg from '../../assets/images/downarrow.png'\nimport { toPascalCase } from '../../constant/TimeUtils'\nimport { Link } from 'react-router-dom'\n\nconst EditFlow = ({ userData, prodList, close, viewFlowData }) => {\n  let api = useAxios()\n  const user = getDecodeData()\n  const [selectedApprovals, setSelectedApprovals] = useState([])\n  const [formErrors, setFormErrors] = useState({\n    accessTo: '',\n    approvalBy: [], // Change from array to object\n    flow: '',\n  })\n  const [hiddenId, setHiddenId] = useState()\n  const [approvalFlows, setApprovalFlows] = useState([])\n  const [selectedValues, setSelectedValues] = useState([])\n  const formRef = useRef(null)\n  const [flowName, setFlowName] = useState('')\n  const [selectedAccessValue, setSelectedAccessValue] = useState([])\n  const [loadings, setLoadings] = useState(false)\n  const options = userData.map((user) => ({\n    value: user.id,\n    label: (\n      <div className=\"select-options select-options-approval\">\n        <img\n          src={user.profile_pic ? ImageUrl + user.profile_pic : profileImage1}\n          style={user.profile_pic ? { width: '29px', borderRadius: '14px' } : { width: '39px' }}\n          alt={user.name}\n          className=\"img-flag\"\n        />\n        <div className=\"node1\" style={user.profile_pic ? { marginLeft: '11px' } : {}}>\n          <p className=\"user-name1\" title={user.name}>\n            {toPascalCase(user.name)}\n          </p>\n          <p className=\"role-text1\">{user.role}</p>\n        </div>\n      </div>\n    ),\n  }))\n\n  const options1 = prodList.map((user) => ({\n    value: user.id,\n    label: (\n      <div className=\"select-options select-options-approval\">\n        <img\n          src={user.profile_pic ? ImageUrl + user.profile_pic : profileImage1}\n          style={user.profile_pic ? { width: '29px', borderRadius: '14px' } : { width: '39px' }}\n          alt={user.name}\n          className=\"img-flag\"\n        />\n        <div className=\"node1\" style={user.profile_pic ? { marginLeft: '11px' } : {}}>\n          <p className=\"user-name1\" title={user.name}>\n            {toPascalCase(user.name)}\n          </p>\n          <p className=\"role-text1\">{user.role}</p>\n        </div>\n      </div>\n    ),\n  }))\n\n  const handleAccessChange = (selectedOptions) => {\n    setSelectedAccessValue((prevSelectedAccessValue) => {\n      if (selectedOptions && selectedOptions.length > 0) {\n        const newValues = selectedOptions.map((option) => ({\n          id: Number(option.value),\n          name: prodList.find((user) => user.id === option.value)?.name || '',\n        }))\n        return newValues\n      } else {\n        return []\n      }\n    })\n  }\n\n  const removeApprovalFlow = (index) => {\n    if (index !== 0) {\n      setFormErrors((prevErrors) => {\n        const newErrors = { ...prevErrors }\n        if (newErrors.approvalBy && newErrors.approvalBy[index]) {\n          newErrors.approvalBy[index] = ''\n        }\n        return newErrors\n      })\n      setApprovalFlows((prevApprovalFlows) => {\n        const updatedFlows = [...prevApprovalFlows]\n        updatedFlows.splice(index, 1)\n        return updatedFlows\n      })\n\n      setSelectedApprovals((prevSelectedApprovals) => {\n        const updatedApprovals = [...prevSelectedApprovals]\n        updatedApprovals.splice(index, 1)\n        return updatedApprovals\n      })\n\n      setSelectedValues((prevSelectedApprovals) => {\n        const updatedApprovals = [...prevSelectedApprovals]\n        updatedApprovals.splice(index, 1)\n        return updatedApprovals\n      })\n    }\n  }\n\n  const handleApprovalSelectChange = (selectedOption, index) => {\n    if (selectedOption) {\n      const newValue = selectedOption\n      setSelectedApprovals((prevSelectedApprovals) => {\n        const updatedApprovals = [...prevSelectedApprovals]\n        updatedApprovals[index] = {\n          id: Number(newValue),\n          name: userData.find((user) => user.id === newValue)?.name || '',\n        }\n        return updatedApprovals\n      })\n    } else {\n      // Handle the case when the selection is cleared\n      setSelectedApprovals((prevSelectedApprovals) => {\n        const updatedApprovals = [...prevSelectedApprovals]\n        updatedApprovals[index] = null\n        return updatedApprovals\n      })\n    }\n  }\n\n  const addApprovalFlow = () => {\n    setApprovalFlows([...approvalFlows, {}])\n    setSelectedValues([...selectedValues, null])\n  }\n\n  const validateForm = () => {\n    const errors = {\n      accessTo: '',\n      approvalBy: [],\n      flow: '',\n    }\n\n    // Validate Flow Name\n    if (!flowName.trim()) {\n      errors.flow = 'Please Enter Flow Name'\n    }\n\n    // Validate Access To (multi-select)\n    if (!selectedAccessValue || selectedAccessValue.length === 0) {\n      errors.accessTo = 'Please Select at Least One Option'\n    }\n\n    // Validate Approval Flows\n    if (approvalFlows.length !== 0) {\n      approvalFlows.forEach((data, index) => {\n        if (selectedApprovals[index] === undefined || selectedApprovals[index] === null) {\n          // Push the error message to the array\n          errors.approvalBy[index] = 'Please Select an Approval'\n        }\n      })\n    }\n\n    setFormErrors(errors)\n\n    // Check for any errors in the validation\n    const hasErrors =\n      errors.flow !== '' ||\n      errors.accessTo !== '' ||\n      errors.approvalBy.some((error) => error !== '')\n\n    return !hasErrors\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    const isFormValid = validateForm()\n    if (isFormValid) {\n      setLoadings(true)\n      const userId = user.id\n      const postData = {\n        name: flowName,\n        access_to: selectedAccessValue,\n        approval_by: selectedApprovals,\n        created_by: userId,\n      }\n      const url = `flow/update/${hiddenId}`\n      await api\n        .put(url, postData, {\n          headers: getHeaders('json'),\n        })\n        .then((response) => {\n          toast.success(response.data.message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n            autoClose: 3000,\n          })\n          setLoadings(false)\n          resetModal()\n        })\n        .catch((error) => {\n          const errors = error.response\n          setLoadings(false)\n          // if (errors.status === 409 && errors.status === 400) {\n          toast.error(errors.data.message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n            autoClose: 3000,\n          })\n          // } else {\n          //   toast.error(error.message, {\n          //     position: toast.POSITION.BOTTOM_RIGHT,\n          //     autoClose: 3000,\n          //   })\n          // }\n        })\n    }\n  }\n\n  const resetModal = () => {\n    setSelectedAccessValue([])\n    setApprovalFlows([{}])\n    setSelectedApprovals([])\n    setSelectedValues([null])\n    setFlowName('')\n    if (formRef.current) {\n      formRef.current.reset()\n    }\n    const errors = {\n      accessTo: '',\n      approvalBy: [],\n      flow: '',\n    }\n    setFormErrors(errors)\n    close()\n  }\n\n  const onInputChange = (e) => {\n    const { value } = e.target\n\n    const re = /^[A-Za-z0-9\\s-]*$/\n\n    if (re.test(value)) {\n      setFlowName(value)\n    }\n  }\n\n  useEffect(() => {\n    if (viewFlowData) {\n      setFlowName(viewFlowData.name)\n      setHiddenId(viewFlowData.id)\n      setSelectedAccessValue(viewFlowData.access)\n      setApprovalFlows(viewFlowData.approvals.map((approval) => ({})))\n      setSelectedValues(viewFlowData.approvals.map((approval) => approval.id))\n      setSelectedApprovals(\n        viewFlowData.approvals.map((approval) => ({\n          id: approval.id,\n          name: approval.name,\n        })),\n      )\n    }\n  }, [viewFlowData])\n\n  return (\n    <CCol xs={12} className=\"card flowlist-main-card product_card_flow\">\n      <CRow>\n        <CCol sm={1} style={{ width: '20px' }} className=\"backarrow_content\">\n          <span style={{ cursor: 'pointer', marginRight: '2px' }} onClick={close}>\n            <BackArrowSvg width=\"16\" height=\"15\" viewBox=\"0 0 18 18\" fill=\"#A5A1A1\" />\n          </span>\n        </CCol>\n        <CCol style={{ marginLeft: '20px' }}>\n          <div style={{ display: 'flex' }}>\n            <h6 className=\"draft-heading-flow\" style={{ marginTop: '3%' }}>\n              Edit{' '}\n            </h6>\n            <div style={{ marginTop: '3%', marginLeft: '10px' }}>\n              <h6>\n                <span style={{ color: '#E01B38', fontWeight: '700' }} className=\"  user_pic_name\">\n                  {viewFlowData.name}\n                </span>\n              </h6>\n            </div>\n          </div>\n          <Breadcrumb\n            className=\"bread-tab\"\n            separator={<span className=\"breadcrumb-separator\">|</span>}\n            items={[\n              {\n                title: (\n                  <Link\n                    rel=\"Dashboard\"\n                    to={'/dashboard'}\n                    className=\"bread-items text-decoration-none text-secondary \"\n                  >\n                    Dashboard\n                  </Link>\n                ),\n              },\n              {\n                title: (\n                  <span\n                    className=\"bread-items text-secondary second-subheading\"\n                    style={{ cursor: 'pointer' }}\n                    onClick={resetModal}\n                  >\n                    Flow list\n                  </span>\n                ),\n              },\n              {\n                title: (\n                  <span className=\"text-secondary second-subheading\" style={{ cursor: 'default' }}>\n                    Edit Flow\n                  </span>\n                ),\n              },\n            ]}\n          />\n          {/* </CCol>\n\n        <CCol xs={12} className=\"edit_flow_body\" style={{ marginLeft: '34px', width: '99%' }}> */}\n          <CForm className=\"mt-3 needs-validation\" noValidate onSubmit={handleSubmit} ref={formRef}>\n            <CRow>\n              <CCol sm={3}>\n                <div className=\"label-field-container\">\n                  <CFormLabel className=\"approval-title\" htmlFor=\"validationCustom01\">\n                    Name of the Flow <span className=\"red-text1 \">*</span>\n                  </CFormLabel>\n                  <CFormInput\n                    className=\"form-input flow-name-input\"\n                    type=\"text\"\n                    maxLength={48}\n                    id=\"validationCustom01\"\n                    placeholder=\"Enter Flow Name\"\n                    feedbackInvalid=\"Please provide a Flow Name.\"\n                    required\n                    value={flowName}\n                    onChange={onInputChange}\n                  />\n                </div>\n                <span className=\"text-danger nameflow-error  \">{formErrors.flow}</span>\n              </CCol>\n              <CCol sm={9} span={6}>\n                <div className=\"label-field-container\">\n                  <CFormLabel className=\"approval-title-acc\" htmlFor=\"validationCustom01\">\n                    Access Persons <span className=\"red-text1\">*</span>\n                  </CFormLabel>\n                  <Select\n                    suffixIcon={\n                      <img\n                        src={Downarrowimg}\n                        alt=\"Downarrowimg\"\n                        style={{ width: '10px', height: '6px' }}\n                      />\n                    }\n                    className=\"form-custom-selects access-input-box approval_select \"\n                    value={\n                      selectedAccessValue\n                        ? options1.filter((option) =>\n                            selectedAccessValue.some((selected) => selected.id === option.value),\n                          )\n                        : null\n                    }\n                    options={options1}\n                    onChange={handleAccessChange}\n                    required\n                    showSearch\n                    placeholder=\"Choose Access\"\n                    allowClear\n                    mode=\"multiple\"\n                    maxTagCount=\"responsive\"\n                    variant={'borderless'}\n                    filterOption={(input, option) => {\n                      const userName =\n                        option.label.props.children[1].props.children[0].props.children\n                      const lowerCaseInput = input.toLowerCase()\n                      const lowerCaseUserName = userName.toLowerCase()\n                      return lowerCaseUserName.includes(lowerCaseInput)\n                    }}\n                    labelInValue={(option) => (\n                      <div className=\"select-options select-options-approval\">\n                        <img\n                          src={option.profile_pic ? ImageUrl + option.profile_pic : profileImage1}\n                          style={\n                            option.profile_pic\n                              ? { width: '29px', borderRadius: '14px' }\n                              : { width: '39px' }\n                          }\n                          alt={option.value}\n                          className=\"img-flag\"\n                        />\n                        <div\n                          className=\"node1\"\n                          style={option.profile_pic ? { marginLeft: '11px' } : {}}\n                        >\n                          <p className=\"user-name1\">{option.value}</p>\n                          <p className=\"role-text1\">{option.label.role}</p>\n                        </div>\n                      </div>\n                    )}\n                  />\n                </div>\n                <span className=\"text-danger nameflow-error \">{formErrors.accessTo}</span>\n              </CCol>\n            </CRow>\n            <CRow>\n              <CCol sm={9} className=\"approval-title\" style={{ marginTop: '40px' }}>\n                Approval Flow <span className=\"red-text1\">*</span>\n              </CCol>\n            </CRow>\n            <CRow gutter={12} className=\"approval-body\">\n              {approvalFlows.map((flow, index) => {\n                const filteredOptions = options.filter(\n                  (option) => !selectedValues.includes(option.value),\n                )\n                const filteredApprovalOptions = filteredOptions.filter(\n                  (option) =>\n                    !selectedAccessValue ||\n                    !selectedAccessValue.some((selected) => selected.id === option.value),\n                )\n\n                return (\n                  <CCol\n                    sm={6}\n                    md={3}\n                    className=\"Edit_approval_selct\"\n                    style={{ marginTop: '15px' }}\n                    key={index}\n                  >\n                    <div className=\"approval-flow-list-input\">\n                      <CFormLabel\n                        className=\"form-label text-c approval-title-inputbox\"\n                        htmlFor={`approvalSelect-${index}`}\n                      >\n                        Approval {index + 1}\n                      </CFormLabel>\n                      <div className=\"select-approval-flow\">\n                        <Select\n                          className=\"form-custom-selects approval-input-box approval_select\"\n                          value={\n                            selectedValues[index] !== undefined\n                              ? options.find((option) => option.value === selectedValues[index]) ||\n                                null\n                              : null\n                          }\n                          variant={'borderless'}\n                          suffixIcon={\n                            <img\n                              src={Downarrowimg}\n                              alt=\"Downarrowimg\"\n                              style={{ width: '10px', height: '6px' }}\n                            />\n                          }\n                          placeholder=\"Choose Approval\"\n                          onChange={(selectedValue) => {\n                            const updatedValues = [...selectedValues]\n                            updatedValues[index] = selectedValue\n                            setSelectedValues(updatedValues)\n\n                            handleApprovalSelectChange(selectedValue, index)\n                          }}\n                          required\n                          showSearch\n                          filterOption={(input, option) => {\n                            const userNameArray =\n                              option &&\n                              option.children.props.children[1].props.children[0].props.children\n                            const userName = userNameArray\n                            const lowerCaseInput = input.toLowerCase()\n                            const lowerCaseUserName = userName.toLowerCase()\n                            return lowerCaseUserName.includes(lowerCaseInput)\n                          }}\n                          allowClear\n                        >\n                          {filteredApprovalOptions.map((option) => (\n                            <Select.Option key={option.value} value={option.value}>\n                              {option.label}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      </div>\n                      {formErrors.approvalBy[index] && (\n                        <span className=\"text-danger approval-error-msg mx-1\">\n                          {formErrors.approvalBy[index]}\n                        </span>\n                      )}\n                      {index !== 0 && (\n                        <button\n                          className=\"text-decoration-none mt-2 border-0 bg-none add-row float-end delete-apporval-field\"\n                          onClick={() => removeApprovalFlow(index)}\n                        >\n                          <div className=\"delete_image\">\n                            <img\n                              src={trashIcon}\n                              alt=\"trash\"\n                              style={{ width: '12px', height: '13px' }}\n                            />\n                          </div>\n                        </button>\n                      )}\n                    </div>\n                  </CCol>\n                )\n              })}\n              <CCol sm={3}>\n                <button\n                  className=\"text-decoration-none border-0 add-row d-flex  add-row-flowlist\"\n                  onClick={addApprovalFlow}\n                  type=\"button\"\n                >\n                  <span style={{ fontSize: '15px', marginRight: '2px' }}> </span> Add Approval\n                </button>\n              </CCol>\n            </CRow>\n            <div style={{ position: 'absolute', bottom: 0, left: 0, right: '17px' }}>\n              <CRow className=\"m-3\">\n                <CCol sm={6}></CCol>\n                <CCol sm={6} className=\"d-flex justify-content-end align-items-center\">\n                  <CButton className=\"cancel-btn text-c  \" onClick={close}>\n                    Cancel\n                  </CButton>\n                  <Button\n                    className=\"crt-submit-button flow-btn save_changes \"\n                    style={{ fontSize: '13px', color: 'white' }}\n                    htmlType=\"submit\"\n                    loading={loadings}\n                  >\n                    Update\n                  </Button>\n                </CCol>\n              </CRow>\n            </div>\n          </CForm>\n        </CCol>\n      </CRow>\n    </CCol>\n  )\n}\nEditFlow.propTypes = {\n  userData: PropTypes.array.isRequired,\n  prodList: PropTypes.array.isRequired,\n  close: PropTypes.func,\n  viewFlowData: PropTypes.object,\n}\nexport default EditFlow\n","import React, { useState, useEffect } from 'react'\nimport {\n  CCol,\n  CRow,\n  CSpinner,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport profileImage1 from '../../assets/images/avatars/avatar1.png'\nimport line from '../../assets/images/Approval Flow Line.png'\nimport { toast, ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { ImageUrl, getHeaders } from '../../constant/Global'\nimport { Breadcrumb, Card, Divider, Tooltip, Modal } from 'antd'\nimport DeleteSvg from '../svgImages/DeleteSvg'\nimport EditSvg from '../svgImages/EditSvg'\nimport AddFlow from './AddFlow'\nimport EditFlow from './EditFlow'\nimport eventEmitter from 'src/constant/EventEmitter'\nimport useAxios from 'src/constant/UseAxios'\nimport { textWrap, toPascalCase } from '../../constant/TimeUtils'\nimport { ExclamationCircleFilled } from '@ant-design/icons'\nimport { Link } from 'react-router-dom'\nconst { confirm } = Modal\nconst SuperAdmin = () => {\n  let api = useAxios()\n  const [visible, setVisible] = useState(false)\n  const [visibleEdit, setVisibleEdit] = useState(false)\n  const [userList, setUserList] = useState([])\n  const [prodList, setProdList] = useState([])\n  const [techList, setTechList] = useState([])\n  const [dataList, setDataList] = useState([])\n  const [tableData, setTableData] = useState([])\n  const [viewFlowData, setViewFlowData] = useState(null)\n  const [commonLoader, setCommonLoader] = useState(true)\n\n  const openModal = () => {\n    setVisible(true)\n  }\n\n  useEffect(() => {\n    fetchData()\n    eventEmitter.on('callFlowList', callBackFlowList)\n    return () => {\n      eventEmitter.off('callFlowList', callBackFlowList)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const fetchData = async () => {\n    try {\n      const [userListRes, prodListRes, techListRes, dataListRes, flowListRes] = await Promise.all([\n        api.get('user/approval-user/list', { headers: getHeaders('json') }),\n        api.get('common/prod_head', { headers: getHeaders('json') }),\n        api.get('common/tech_head', { headers: getHeaders('json') }),\n        api.get('common/data_head', { headers: getHeaders('json') }),\n        api.get('flow/list', { headers: getHeaders('json') }),\n      ])\n\n      setUserList(userListRes.data.data)\n      setProdList(prodListRes.data.data)\n      setTechList(techListRes.data.data)\n      setDataList(dataListRes.data.data)\n      setTableData(flowListRes.data.data)\n      setCommonLoader(false)\n    } catch (error) {\n      // console.error('Error fetching data:', error)\n      // Handle error gracefully\n    }\n  }\n\n  const callBackFlowList = () => {\n    fetchData()\n  }\n\n  let accessPersonList\n  if (Array.isArray(techList) && Array.isArray(prodList) && Array.isArray(dataList)) {\n    accessPersonList = [...techList, ...prodList, ...dataList]\n  } else {\n    accessPersonList = []\n  }\n\n  const handleEditClick = async (id) => {\n    const url = `flow/view/` + id\n    api\n      .get(url, {\n        headers: getHeaders('json'),\n      })\n      .then((response) => {\n        const data = response.data.data\n        setViewFlowData(data)\n        setVisibleEdit(true)\n      })\n      .catch((error) => {})\n  }\n\n  const handleDeleteClick = async (id) => {\n    const url = `flow/delete/` + id\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        api\n          .delete(url, {\n            headers: getHeaders('json'),\n          })\n          .then((response) => {\n            fetchData()\n            resolve(response)\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      }, 1000)\n    })\n  }\n\n  const closeAddFlow = () => {\n    setVisible(false)\n    fetchData()\n  }\n\n  const closeEditFlow = () => {\n    setVisibleEdit(false)\n    fetchData()\n  }\n\n  const warning = (id) => {\n    confirm({\n      title: 'Delete Flow',\n      content: 'Are you sure to delete this Flow ?',\n      icon: <ExclamationCircleFilled />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelButtonProps: {\n        style: { borderColor: '#f54550', color: 'black' },\n      },\n      closable: true,\n      okButtonProps: {\n        style: { borderColor: '#f54550', color: 'white', backgroundColor: '#f54550' },\n      },\n      cancelText: 'No',\n      async onOk() {\n        try {\n          await handleDeleteClick(id)\n          toast.success('Flow Deleted Successfully', {\n            position: toast.POSITION.BOTTOM_RIGHT,\n            autoClose: 3000,\n          })\n        } catch (error) {\n          toast.error('Deletion failed', {\n            position: toast.POSITION.BOTTOM_RIGHT,\n            autoClose: 3000,\n          })\n        }\n      },\n    })\n  }\n\n  return (\n    <>\n      <ToastContainer />\n      <CRow>\n        {visible ? (\n          <AddFlow userData={userList} prodList={accessPersonList} close={closeAddFlow} />\n        ) : visibleEdit ? (\n          <EditFlow\n            userData={userList}\n            prodList={accessPersonList}\n            close={closeEditFlow}\n            viewFlowData={viewFlowData}\n          />\n        ) : (\n          <CCol\n            xs={12}\n            className=\"card flowlist-main-card product-card_flow\"\n            style={{ border: '0px', padding: '0px' }}\n          >\n            <div style={{ background: 'white', borderRadius: '5px' }}>\n              <CRow className=\"flowlist-card-header\">\n                <CCol xs={8} sm={9} md={9} lg={10} className=\"flow-grid\">\n                  <h6 className=\"flowlist-heading\">Flow List</h6>\n                  <Breadcrumb\n                    className=\"bread-tab\"\n                    separator={<span className=\"breadcrumb-separator\">|</span>}\n                    items={[\n                      {\n                        title: (\n                          <Link\n                            rel=\"Dashboard\"\n                            to={'/dashboard'}\n                            style={{ marginLeft: '17px' }}\n                            className=\"bread-items text-decoration-none text-secondary \"\n                          >\n                            Dashboard\n                          </Link>\n                        ),\n                      },\n                      {\n                        title: (\n                          <span\n                            className=\"text-secondary second-subheading\"\n                            style={{ cursor: 'default' }}\n                          >\n                            Flow List\n                          </span>\n                        ),\n                      },\n                    ]}\n                  />\n                </CCol>\n                <CCol xs={4} sm={3} md={3} lg={2} className=\"flowlist-create-button \">\n                  <button\n                    className=\"createflow-button-create button-clr\"\n                    onClick={openModal}\n                    style={{ fontWeight: '700' }}\n                  >\n                    <span className=\"plus-lable\">+</span> Create Flow\n                  </button>\n                </CCol>\n              </CRow>\n              <div className=\"table-container table_scroll_flowlist  lap-table mt-4\">\n                <CTable className=\"flowlist-fulltable\" hover>\n                  <CTableHead className=\"head-row flowlist-table\">\n                    <CTableRow>\n                      <CTableHeaderCell\n                        className=\"table-head-flowlist text-c text-center\"\n                        scope=\"col\"\n                        width=\"4%\"\n                      >\n                        SI.No\n                      </CTableHeaderCell>\n                      <CTableHeaderCell\n                        className=\"table-head table-head-flowlist    text-c\"\n                        width=\"10%\"\n                        scope=\"col\"\n                      >\n                        Name of the Flow\n                      </CTableHeaderCell>\n                      <CTableHeaderCell\n                        className=\"table-head table-head-flowlist text-c\"\n                        scope=\"col\"\n                        width=\"10%\"\n                      >\n                        Access Persons\n                      </CTableHeaderCell>\n                      <CTableHeaderCell\n                        className=\"table-head table-head-flowlist text-c \"\n                        scope=\"col\"\n                        width=\"60%\"\n                      >\n                        Approval Flow\n                      </CTableHeaderCell>\n                      <CTableHeaderCell\n                        className=\"table-head table-head-flowlist-active text-c text-center\"\n                        scope=\"col\"\n                        width=\"4%\"\n                      >\n                        Action\n                      </CTableHeaderCell>\n                    </CTableRow>\n                  </CTableHead>\n                  <CTableBody>\n                    {!tableData ? (\n                      <div></div>\n                    ) : (\n                      tableData.map((flow, index) => (\n                        <CTableRow key={index}>\n                          <CTableDataCell\n                            className=\"activity-text-index td-text flowlist-name text-center pad-bottom_flow\"\n                            width=\"4%\"\n                          >\n                            {index + 1}\n                          </CTableDataCell>\n\n                          <CTableDataCell\n                            className=\"td-text text-c flowlist-name pad-bottom_flow\"\n                            width=\"8%\"\n                          >\n                            <Tooltip\n                              placement=\"bottomLeft\"\n                              title={flow.name}\n                              // className=\"flowlist-name-lable\"\n                            >\n                              {textWrap(flow.name, 15)}\n                            </Tooltip>\n                          </CTableDataCell>\n\n                          <CTableDataCell\n                            className=\"td-text flowlist-accesperson pad-bottom_flow\"\n                            width=\"5%\"\n                          >\n                            <div className=\"table-cell-container\">\n                              <div className=\"image-background-accessperson\">\n                                {flow.access.slice(0, 3).map((member, memberindex) => (\n                                  <div className=\"accessPerImg\" key={memberindex}>\n                                    <Tooltip placement=\"bottom\" title={member.name}>\n                                      <div className=\"tooltip-container\">\n                                        <img\n                                          src={\n                                            member.profile_pic\n                                              ? ImageUrl + member.profile_pic\n                                              : profileImage1\n                                          }\n                                          className={\n                                            member.profile_pic ? 'first-image' : 'second-image'\n                                          }\n                                          alt=\"Access Person Images\"\n                                        />\n                                      </div>\n                                    </Tooltip>\n                                  </div>\n                                ))}\n                                <div>\n                                  {flow.access.length > 3 && (\n                                    <div className=\"accessPerImg text-center more-person-access rounded-circle\">\n                                      <span>+{flow.access.length - 3}</span>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                              {flow.access.length > 3 && (\n                                <div className=\"card-list-person\">\n                                  <Card\n                                    style={{ width: '220px', height: '208px', overflowY: 'auto' }}\n                                    className=\"Access-card\"\n                                  >\n                                    {flow.access.map((member, indexmember) => (\n                                      <div key={indexmember}>\n                                        <div className=\" access-person-tooltip  \">\n                                          <div className=\"image-background\">\n                                            <img\n                                              src={\n                                                member.profile_pic\n                                                  ? ImageUrl + member.profile_pic\n                                                  : profileImage1\n                                              }\n                                              className={\n                                                member.profile_pic\n                                                  ? 'card-access-image'\n                                                  : 'card-approval-image'\n                                              }\n                                              alt={member.name}\n                                            />\n                                          </div>\n                                          <div\n                                            className=\"node1 access-person-hovercard\"\n                                            style={member.profile_pic ? { marginLeft: '11px' } : {}}\n                                          >\n                                            <p className=\"member-user-name1\">\n                                              {toPascalCase(member.name)}{' '}\n                                            </p>\n                                            {/* <p className=\"member-user-name1\"> {member.name}</p> */}\n                                            <p className=\"member-role-text1\">{member.role}</p>\n                                          </div>\n                                        </div>\n                                        <Divider />\n                                      </div>\n                                    ))}\n                                  </Card>\n                                </div>\n                              )}\n                            </div>\n                          </CTableDataCell>\n                          <CTableDataCell\n                            className=\"td-text flowlist-approvalflow pad-bottom_flow\"\n                            width=\"50%\"\n                          >\n                            <div className=\"table-cell-container-flow\">\n                              <div className=\"flow-chart Approval-flow-chart  mt-3\">\n                                {flow.approvals.slice(0, 5).map((approver, approverIndex) => (\n                                  <React.Fragment key={approverIndex}>\n                                    <div className=\" approval-lable-content\">\n                                      <div className=\"image-backgrounds\">\n                                        <img\n                                          src={\n                                            approver.profile_pic\n                                              ? ImageUrl + approver.profile_pic\n                                              : profileImage1\n                                          }\n                                          alt=\"Access Person Images\"\n                                          className={\n                                            approver.profile_pic\n                                              ? 'first-image-approval'\n                                              : 'second-image'\n                                          }\n                                        />\n                                      </div>\n                                      <div className=\"approval-flow\">\n                                        <p\n                                          className=\"user-name-table  \"\n                                          title={toPascalCase(approver.name)}\n                                        >\n                                          {toPascalCase(approver.name)}\n                                        </p>\n                                        <p\n                                          className=\"role-text1 approver-role-text1\"\n                                          title={approver.role}\n                                        >\n                                          {approver.role}\n                                        </p>\n                                      </div>\n                                    </div>\n                                    {approverIndex < 4 &&\n                                      approverIndex < flow.approvals.length - 1 && (\n                                        <div className=\"connector access-line-img\">\n                                          <img src={line} alt=\"Access Person Images\" width=\"22px\" />\n                                        </div>\n                                      )}\n                                  </React.Fragment>\n                                ))}\n                                <div>\n                                  {flow.approvals.length > 5 && (\n                                    <p\n                                      style={{\n                                        fontSize: '11px',\n                                        color: '#989696',\n                                        marginTop: '-20px',\n                                        marginLeft: '15px',\n                                      }}\n                                    >\n                                      +{flow.approvals.length - 5} <div>more</div>\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                              {flow.approvals.length > 5 && (\n                                <div className=\"card-list-flow\">\n                                  <Card style={{ width: '220px' }} className=\"flow-card\">\n                                    {flow.approvals.map((approver, approverflowIndex) => (\n                                      <div key={approverflowIndex}>\n                                        <div className=\" access-person-tooltip \">\n                                          <img\n                                            src={\n                                              approver.profile_pic\n                                                ? ImageUrl + approver.profile_pic\n                                                : profileImage1\n                                            }\n                                            className={\n                                              approver.profile_pic\n                                                ? 'card-approval-image'\n                                                : 'card-approval-image'\n                                            }\n                                            alt={approver.name}\n                                          />\n                                          <div\n                                            className=\"node1 access-person-hovercard\"\n                                            style={\n                                              approver.profile_pic ? { marginLeft: '11px' } : {}\n                                            }\n                                          >\n                                            <p className=\"approver-user-name1\">{approver.name}</p>\n                                            <p className=\"approver-role-text12\">{approver.role}</p>\n                                          </div>\n                                        </div>\n                                        <Divider />\n                                      </div>\n                                    ))}\n                                  </Card>\n                                </div>\n                              )}\n                            </div>\n                          </CTableDataCell>\n                          <CTableDataCell\n                            className=\"td-text flowlist-Action pad-bottom_flow\"\n                            width=\"4%\"\n                          >\n                            <div className=\"action-items\">\n                              <button\n                                type=\"button\"\n                                className=\"action-view edit-button\"\n                                onClick={() => handleEditClick(flow.id)}\n                              >\n                                <EditSvg\n                                  width=\"14\"\n                                  height=\"14\"\n                                  viewBox=\"0 0 18 18\"\n                                  fill=\"none\"\n                                  color=\"white\"\n                                  clipH=\"18\"\n                                  clipW=\"18\"\n                                />\n                              </button>\n                              <button\n                                type=\"button\"\n                                className=\"action-view cross-button\"\n                                onClick={() => warning(flow.id)}\n                              >\n                                <DeleteSvg\n                                  width=\"16 \"\n                                  height=\"16\"\n                                  viewBox=\"0 0 18 18\"\n                                  fill=\"#A5A1A1\"\n                                />\n                              </button>\n                            </div>\n                          </CTableDataCell>\n                        </CTableRow>\n                      ))\n                    )}\n                  </CTableBody>\n                </CTable>\n                {(tableData === null && !commonLoader) ||\n                (tableData.length === 0 && !commonLoader) ? (\n                  <div className=\"text-c text-center my-3 td-text\">No Data Found</div>\n                ) : commonLoader ? (\n                  <div className=\"text-c text-center my-3 td-text\">\n                    <CSpinner color=\"danger\" />\n                  </div>\n                ) : (\n                  <div></div>\n                )}\n              </div>\n            </div>\n          </CCol>\n        )}\n      </CRow>\n    </>\n  )\n}\n\nexport default SuperAdmin\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst BackArrowSvg = ({ width, height, fill, viewBox }) => (\n  <svg\n    width={width}\n    height={height}\n    viewBox={viewBox}\n    fill={fill}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M16.5824 4.58202H3.41244L6.29244 1.70202C6.47942 1.51504 6.58447 1.26145 6.58447 0.997021C6.58447 0.732594 6.47942 0.478998 6.29244 0.292021C6.10547 0.105043 5.85187 0 5.58744 0C5.32302 0 5.06942 0.105043 4.88244 0.292021L0.292444 4.88202C0.19974 4.97453 0.126193 5.08442 0.0760114 5.2054C0.02583 5.32637 0 5.45605 0 5.58702C0 5.71799 0.02583 5.84767 0.0760114 5.96865C0.126193 6.08962 0.19974 6.19951 0.292444 6.29202L4.88244 10.882C4.97503 10.9746 5.08494 11.048 5.2059 11.0981C5.32687 11.1483 5.45651 11.174 5.58744 11.174C5.71837 11.174 5.84802 11.1483 5.96899 11.0981C6.08995 11.048 6.19986 10.9746 6.29244 10.882C6.38503 10.7894 6.45847 10.6795 6.50857 10.5586C6.55868 10.4376 6.58447 10.308 6.58447 10.177C6.58447 10.0461 6.55868 9.91644 6.50857 9.79548C6.45847 9.67451 6.38503 9.5646 6.29244 9.47202L3.41244 6.58202H16.5824C17.1324 6.58202 17.5824 6.13202 17.5824 5.58202C17.5824 5.03202 17.1324 4.58202 16.5824 4.58202Z\"\n      fill=\"#919EAB\"\n    />\n  </svg>\n)\n\nBackArrowSvg.propTypes = {\n  width: PropTypes.string,\n  height: PropTypes.string,\n  fill: PropTypes.string,\n  viewBox: PropTypes.string,\n}\n\nexport default BackArrowSvg\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst DeleteSvg = ({ width, height, fill, viewBox }) => (\n  <svg\n    width={width}\n    height={height}\n    viewBox={viewBox}\n    fill={fill}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M15.75 2.99999H13.425C13.0662 1.25518 11.5313 0.00225 9.74998 0H8.24996C6.46863 0.00225 4.93378 1.25518 4.57498 2.99999H2.24999C1.83578 2.99999 1.5 3.33577 1.5 3.74998C1.5 4.16419 1.83578 4.5 2.24999 4.5H2.99998V14.25C3.00247 16.32 4.67995 17.9975 6.74999 18H11.25C13.32 17.9975 14.9975 16.32 15 14.25V4.5H15.75C16.1642 4.5 16.5 4.16422 16.5 3.75001C16.5 3.3358 16.1642 2.99999 15.75 2.99999ZM8.25 12.75C8.25 13.1642 7.91422 13.5 7.50001 13.5C7.08577 13.5 6.74999 13.1642 6.74999 12.75V8.25001C6.74999 7.8358 7.08576 7.50002 7.49998 7.50002C7.91419 7.50002 8.24996 7.8358 8.24996 8.25001V12.75H8.25ZM11.25 12.75C11.25 13.1642 10.9142 13.5 10.5 13.5C10.0858 13.5 9.75001 13.1642 9.75001 12.75V8.25001C9.75001 7.8358 10.0858 7.50002 10.5 7.50002C10.9142 7.50002 11.25 7.8358 11.25 8.25001V12.75ZM6.12825 2.99999C6.44726 2.10171 7.29677 1.50114 8.25 1.49998H9.75001C10.7032 1.50114 11.5528 2.10171 11.8718 2.99999H6.12825Z\"\n      fill={fill}\n    />\n  </svg>\n)\nDeleteSvg.propTypes = {\n  width: PropTypes.string,\n  height: PropTypes.string,\n  fill: PropTypes.string,\n  viewBox: PropTypes.string,\n}\nexport default DeleteSvg\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst EditSvg = ({ width, height, fill, viewBox, color, clipH, clipW }) => (\n  <svg\n    width={width}\n    height={height}\n    viewBox={viewBox}\n    fill={fill}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clipPath=\"url(#clip0_3212_26864)\">\n      <path\n        d=\"M0 17.4739C0.104004 17.0872 0.213135 16.7019 0.310913 16.3137C0.57312 15.2722 0.827637 14.2285 1.09351 13.1881C1.12097 13.0812 1.18506 12.9702 1.26306 12.8918C4.50146 9.64685 7.74353 6.40552 10.9852 3.16418C11.0178 3.13159 11.053 3.10083 11.072 3.08325C12.3519 4.36279 13.6271 5.63831 14.9172 6.9281C14.9004 6.94641 14.8605 6.99292 14.8169 7.03613C11.5913 10.261 8.36646 13.4862 5.13721 16.707C5.04346 16.8004 4.91089 16.8784 4.78308 16.911C3.38599 17.2677 1.98596 17.6138 0.587036 17.9635C0.554077 17.9719 0.522949 17.988 0.490723 18.0005H0.280151C0.186401 17.9067 0.0930176 17.8134 -0.000732422 17.7196C-0.000732422 17.6376 -0.000732422 17.5559 -0.000732422 17.4739H0Z\"\n        fill=\"#A5A1A1\"\n      />\n      <path\n        d=\"M0 17.7192C0.09375 17.813 0.187134 17.9064 0.280884 18.0001H0C0 17.9064 0 17.813 0 17.7192Z\"\n        fill=\"white\"\n      />\n      <path\n        d=\"M16.0682 5.78585C14.7806 4.49825 13.5037 3.22201 12.2164 1.93477C12.5629 1.58834 12.9152 1.23202 13.2722 0.880087C13.4344 0.720419 13.5927 0.552694 13.7747 0.418295C14.4921 -0.111613 15.5486 -0.0731604 16.2081 0.527426C16.6571 0.936117 17.0889 1.36788 17.4965 1.81795C18.1018 2.48592 18.1274 3.50362 17.5884 4.22909C17.5188 4.32247 17.4408 4.41073 17.3588 4.49349C16.9274 4.92818 16.4934 5.36068 16.0682 5.78585Z\"\n        fill=\"#A5A1A1\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_3212_26864\">\n        <rect width={clipW} height={clipH} fill={color} />\n      </clipPath>\n    </defs>\n  </svg>\n)\nEditSvg.propTypes = {\n  width: PropTypes.string,\n  height: PropTypes.string,\n  fill: PropTypes.string,\n  viewBox: PropTypes.string,\n  color: PropTypes.string,\n  clipW: PropTypes.string,\n  clipH: PropTypes.string,\n}\nexport default EditSvg\n"],"names":["EventEmitter","_ref","userData","prodList","close","api","useAxios","user","getDecodeData","selectedApprovals","setSelectedApprovals","useState","formErrors","setFormErrors","accessTo","approvalBy","flow","approvalFlows","setApprovalFlows","selectedValues","setSelectedValues","formRef","useRef","flowName","setFlowName","selectedAccessValue","setSelectedAccessValue","loadings","setLoadings","options","map","value","id","label","_jsxs","className","children","_jsx","src","profile_pic","ImageUrl","profileImage1","style","width","borderRadius","alt","name","marginLeft","title","toPascalCase","role","options1","resetModal","current","reset","CCol","xs","CRow","sm","cursor","marginRight","onClick","BackArrowSvg","height","viewBox","fill","marginTop","Breadcrumb","separator","items","Link","rel","to","CForm","noValidate","onSubmit","async","event","preventDefault","validateForm","errors","trim","length","forEach","data","index","undefined","some","error","userId","postData","access_to","approval_by","created_by","url","post","headers","getHeaders","then","response","toast","success","message","position","POSITION","BOTTOM_RIGHT","autoClose","catch","status","ref","gutter","span","CFormLabel","htmlFor","CFormInput","type","placeholder","feedbackInvalid","required","maxLength","onChange","e","target","test","Select","filter","option","selected","selectedOptions","prevSelectedAccessValue","newValues","_prodList$find","Number","find","showSearch","allowClear","mode","variant","filterOption","input","userName","props","lowerCaseInput","toLowerCase","includes","suffixIcon","Downarrowimg","maxTagCount","labelInValue","filteredApprovalOptions","md","concat","selectedValue","updatedValues","handleApprovalSelectChange","selectedOption","newValue","prevSelectedApprovals","_userData$find","updatedApprovals","Option","prevErrors","newErrors","prevApprovalFlows","updatedFlows","splice","removeApprovalFlow","trashIcon","addApprovalFlow","fontSize","CButton","Button","color","htmlType","loading","viewFlowData","hiddenId","setHiddenId","useEffect","access","approvals","approval","display","fontWeight","put","bottom","left","right","confirm","Modal","SuperAdmin","visible","setVisible","visibleEdit","setVisibleEdit","userList","setUserList","setProdList","techList","setTechList","dataList","setDataList","tableData","setTableData","setViewFlowData","commonLoader","setCommonLoader","fetchData","eventEmitter","on","callBackFlowList","off","userListRes","prodListRes","techListRes","dataListRes","flowListRes","Promise","all","get","accessPersonList","Array","isArray","warning","content","icon","ExclamationCircleFilled","okText","okType","cancelButtonProps","borderColor","closable","okButtonProps","backgroundColor","cancelText","onOk","resolve","reject","setTimeout","delete","handleDeleteClick","_Fragment","ToastContainer","AddFlow","closeAddFlow","EditFlow","closeEditFlow","border","padding","background","lg","openModal","CTable","hover","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","CTableDataCell","Tooltip","placement","textWrap","slice","member","memberindex","Card","overflowY","indexmember","Divider","approver","approverIndex","React","line","approverflowIndex","handleEditClick","EditSvg","clipH","clipW","DeleteSvg","CSpinner","xmlns","d","clipPath"],"sourceRoot":""}