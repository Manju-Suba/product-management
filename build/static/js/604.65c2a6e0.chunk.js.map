{"version":3,"file":"static/js/604.65c2a6e0.chunk.js","mappings":"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","sources":["views/modal/ApprovedConfirmModel.js","views/modal/RejectConfirmModal.js","views/productMemberActivity/PendingActivity.js","views/productMemberActivity/ClosedActivity.js","views/productMemberActivity/ProductMembersActivity.js","views/svgImages/CheckSvg.js"],"sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Input, Modal } from 'antd'\n\nconst { TextArea } = Input\nconst ApprovedConfirmModal = ({\n  isModalOpen,\n  handleCancel,\n  handleApprove,\n  id,\n  headContent,\n  resetFunc,\n}) => {\n  const [remarks, setRemarks] = useState('')\n  const [loading, setLoadings] = useState(false)\n\n  const handleOk = async () => {\n    setLoadings(true)\n    try {\n      const response = await handleApprove('Approved', id, remarks)\n      if (response.status === true) {\n        resetFunc()\n      }\n    } catch (error) {\n    } finally {\n      setLoadings(false)\n    }\n  }\n\n  const handleRemark = (remarks) => {\n    const regex = /^(?!\\s)(?![&@.,()\\s])(?![^a-zA-Z0-9\\s.,()-]+$)[&@a-zA-Z0-9\\s.,()-]*$/\n    if (regex.test(remarks) || remarks === '') {\n      setRemarks(remarks)\n    }\n  }\n\n  return (\n    <Modal\n      title={`Approved ${headContent}`}\n      open={isModalOpen}\n      onOk={handleOk}\n      okText=\"Approved\"\n      onCancel={handleCancel}\n      okButtonProps={{\n        style: { background: '#f54550', borderColor: '#f54550', color: 'white' },\n        loading: loading,\n      }} // Change button color here\n      maskClosable={false}\n    >\n      <p>Do you want to do Approved this {headContent} ?</p>\n\n      <TextArea\n        id=\"Description\"\n        variant={'borderless'}\n        value={remarks}\n        onChange={(e) => handleRemark(e.target.value)}\n        className=\"time-border-bottom\"\n        style={{\n          color: 'black',\n          width: '265px',\n          fontSize: '13px',\n          padding: '0px',\n        }}\n        placeholder=\"Enter Remarks...\"\n        autoSize={{\n          minRows: 0,\n          maxRows: 1,\n        }}\n      />\n      <br />\n    </Modal>\n  )\n}\n\nApprovedConfirmModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleCancel: PropTypes.func,\n  handleApprove: PropTypes.func,\n  id: PropTypes.any,\n  headContent: PropTypes.string,\n  resetFunc: PropTypes.func,\n}\nexport default ApprovedConfirmModal\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Input, Modal } from 'antd'\n\nconst { TextArea } = Input\nconst RejectConfirmModal = ({\n  isModalOpen,\n  handleCancel,\n  handleApprove,\n  id,\n  headContent,\n  resetFunc,\n}) => {\n  const [remarks, setRemarks] = useState('')\n  const [loadings, setLoadings] = useState(false)\n  const [formErrors, setFormErrors] = useState({\n    remarks: '',\n  })\n\n  const validateForm = () => {\n    const errors = {\n      remarks: '',\n    }\n    if (remarks === '') {\n      errors.remarks = 'Please Enter Remarks'\n    }\n    setFormErrors(errors)\n    const hasErrors = errors.remarks !== ''\n    return !hasErrors\n  }\n\n  const handleOk = async () => {\n    const isFormValid = validateForm()\n    if (isFormValid) {\n      setLoadings(true)\n      try {\n        const response = await handleApprove('Rejected', id, remarks)\n        if (response.status === true) {\n          resetFunc()\n        }\n      } catch (error) {\n      } finally {\n        setLoadings(false)\n      }\n    }\n  }\n\n  const handleRemark = (remarks) => {\n    const regex = /^(?!\\s)(?![&@.,()\\s])(?![^a-zA-Z0-9\\s.,()-]+$)[&@a-zA-Z0-9\\s.,()-]*$/\n    if (regex.test(remarks) || remarks === '') {\n      setRemarks(remarks)\n    }\n  }\n\n  return (\n    <Modal\n      title={`Reject ${headContent}`}\n      open={isModalOpen}\n      onOk={handleOk}\n      okText=\"Reject\"\n      onCancel={handleCancel}\n      okButtonProps={{\n        style: { background: '#f54550', borderColor: '#f54550', color: 'white' },\n        loading: loadings,\n        disabled: remarks.trim() === '',\n      }} // Change button color here\n      maskClosable={false}\n    >\n      <p>Do you want to do reject this {headContent} ?</p>\n\n      <TextArea\n        id=\"Description\"\n        variant={'borderless'}\n        value={remarks}\n        onChange={(e) => handleRemark(e.target.value)}\n        className=\"time-border-bottom\"\n        style={{\n          color: 'black',\n          width: '265px',\n          fontSize: '13px',\n          padding: '0px',\n        }}\n        placeholder=\"Enter Remarks...\"\n        autoSize={{\n          minRows: 0,\n          maxRows: 1,\n        }}\n      />\n      <br />\n      <span className=\"text-danger nameflow-error \">{formErrors.remarks}</span>\n    </Modal>\n  )\n}\n\nRejectConfirmModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  handleCancel: PropTypes.func,\n  handleApprove: PropTypes.func,\n  id: PropTypes.any,\n  headContent: PropTypes.string,\n  resetFunc: PropTypes.func,\n}\nexport default RejectConfirmModal\n","import React, { useState, useEffect, useRef } from 'react'\nimport { formatTimeDuration, toPascalCase } from '../../constant/TimeUtils'\nimport CrossSvg from '../svgImages/CrossSvg'\nimport CheckSvg from '../svgImages/CheckSvg'\nimport RejectConfirmModal from '../modal/RejectConfirmModal'\nimport {\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CSpinner,\n} from '@coreui/react'\nimport dayjs from 'dayjs'\nimport { getHeaders, ImageUrl } from 'src/constant/Global'\nimport profileImage1 from '../../assets/images/avatars/wrapper.png'\nimport { toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport PropTypes from 'prop-types'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { DatePicker, Breadcrumb, Checkbox, Select, Skeleton } from 'antd'\nimport useAxios from 'src/constant/UseAxios'\nimport Downarrowimg from '../../assets/images/downarrow.png'\nimport ApprovedConfirmModal from '../modal/ApprovedConfirmModel'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { Link } from 'react-router-dom'\nconst { RangePicker } = DatePicker\n\nconst PendingActivity = ({ formatDate, productLists, prodLoader }) => {\n  let api = useAxios()\n  const [memberTable, setMemberTable] = useState([])\n  const [selectedRows, setSelectedRows] = useState([])\n  const [productList, setProductList] = useState([])\n  const [memberList, setMemberList] = useState([])\n  const [headerLabel, setHeaderLabel] = useState('')\n  const rangePickerRef = useRef()\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [singleId, setSingleId] = useState()\n  const [commonLoader, setCommonLoader] = useState(true)\n  const [rejectStatus, setRejectStatus] = useState('')\n  const [openSelectAll, setOpenSelectAll] = useState(false)\n  const [approvedStatusAll, setApprovedStatusAll] = useState('')\n  const [openSelectRejectAll, setOpenSelectRejectAll] = useState(false)\n  const [singleApprovedId, setSingleApprovedId] = useState('')\n  const [approvedStatus, setApprovedStatus] = useState('')\n  const [open, setOpen] = useState(false)\n  const selectRef = useRef(null)\n  const [mLoader, setMLoader] = useState(false)\n  const [pLoader, setPLoader] = useState(false)\n  const startDateRef = useRef(null)\n  const endDateRef = useRef(null)\n  const pageRef = useRef(0)\n  const productIdRef = useRef(0)\n  const memberIdRef = useRef(0)\n  const filterRef = useRef('default')\n  const hasMoreRef = useRef(true)\n  const [abortController, setAbortController] = useState(new AbortController())\n\n  const showPopconfirm = (status, rowId) => {\n    setOpen(true)\n    setSingleApprovedId(rowId)\n    setApprovedStatus(status)\n  }\n  const showPopconfirmAll = (status) => {\n    if (status === 'Approved') {\n      setOpenSelectAll(true)\n      setApprovedStatusAll('Approved')\n    } else if (status === 'Reject') {\n      setOpenSelectRejectAll(true)\n      setApprovedStatusAll('Reject')\n    }\n  }\n\n  const handleApproveCancel = () => {\n    setOpen(false)\n  }\n\n  const handleApproveCancelAll = () => {\n    setOpenSelectAll(false)\n    setSelectedRows([])\n    setHeaderLabel('')\n  }\n\n  const handleStartDateChange = (date) => {\n    pageRef.current = 0\n    hasMoreRef.current = true\n    setProductList([])\n    setMemberList([])\n    setCommonLoader(true)\n    setPLoader(true)\n    setMLoader(true)\n    if (date !== null) {\n      const formattedFromDate = dayjs(date[0]).format('YYYY-MM-DD')\n      const formattedToDate = dayjs(date[1]).format('YYYY-MM-DD')\n      startDateRef.current = formattedFromDate\n      endDateRef.current = formattedToDate\n      getProductMemberActivitywithdatewise(formattedFromDate, formattedToDate)\n      if (productIdRef.current !== 0 && memberIdRef.current === 0) {\n        filterRef.current = 'dateandproduct'\n      } else if (productIdRef.current === 0 && memberIdRef.current !== 0) {\n        filterRef.current = 'dateandmember'\n      } else if (productIdRef.current === 0 && memberIdRef.current === 0) {\n        filterRef.current = 'date'\n      } else {\n        filterRef.current = 'all'\n      }\n    } else {\n      startDateRef.current = null\n      endDateRef.current = null\n      if (productIdRef.current !== 0 && memberIdRef.current === 0) {\n        filterRef.current = 'product'\n      } else if (productIdRef.current === 0 && memberIdRef.current !== 0) {\n        filterRef.current = 'member'\n      } else if (productIdRef.current === 0 && memberIdRef.current === 0) {\n        filterRef.current = 'default'\n      } else {\n        filterRef.current = 'memberandproduct'\n      }\n      setProductList(productLists)\n      setPLoader(false)\n      setMLoader(false)\n      setMemberList([])\n    }\n    getProductActivityall()\n  }\n\n  useEffect(() => {\n    setProductList(productLists)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [productLists])\n\n  useEffect(() => {\n    hasMoreRef.current = true\n    getProductActivityall()\n    const tableContainer = document.querySelector('.table-container')\n    tableContainer.addEventListener('scroll', handleScroll)\n    return () => {\n      tableContainer.removeEventListener('scroll', handleScroll)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleScroll = () => {\n    const tableContainer = document.querySelector('.table-container')\n    if (tableContainer.scrollTop + tableContainer.clientHeight === tableContainer.scrollHeight) {\n      if (hasMoreRef.current === true) {\n        getProductActivityall()\n      }\n    }\n  }\n\n  const handleHeaderCheck = (isChecked) => {\n    if (isChecked) {\n      const allRowIds = memberTable.map((row) => row.id)\n      setSelectedRows(allRowIds)\n      setHeaderLabel(`${allRowIds.length} Selected`)\n    } else {\n      setSelectedRows([])\n      setHeaderLabel('')\n    }\n  }\n\n  const handleMemberCheck = (rowId, isChecked) => {\n    if (isChecked) {\n      setSelectedRows((prevSelectedRows) => [...prevSelectedRows, rowId])\n    } else {\n      setSelectedRows((prevSelectedRows) =>\n        prevSelectedRows.filter((selectedId) => selectedId !== rowId),\n      )\n    }\n\n    // Calculate the new number of selected rows\n    const newSelectedRows = isChecked\n      ? [...selectedRows, rowId]\n      : selectedRows.filter((selectedId) => selectedId !== rowId)\n    const newSelectedRowCount = newSelectedRows.length\n\n    // Update the header label\n    if (newSelectedRowCount < 1) {\n      setHeaderLabel('')\n    } else {\n      setHeaderLabel(`${newSelectedRowCount} Selected`)\n    }\n  }\n\n  const handleButtonClick = async (status, id, remarksValue) => {\n    if (approvedStatusAll === 'Reject' && remarksValue === '') {\n      toast.error('Please Enter Remarks!..', {\n        position: toast.POSITION.BOTTOM_RIGHT,\n        autoClose: 3000,\n      })\n    } else {\n      return await statuschange(approvedStatusAll, selectedRows, remarksValue)\n    }\n  }\n\n  const getProductMemberActivitywithdatewise = async (formDate, todate) => {\n    const formattedFromDate = dayjs(formDate).format('YYYY-MM-DD')\n    const formattedToDate = dayjs(todate).format('YYYY-MM-DD')\n    setCommonLoader(true)\n    const url = `common/timesheet/activity/ownerlist/daterange/all?fromdate=${formattedFromDate}&todate=${formattedToDate}`\n    try {\n      const response = await api.get(url, {\n        headers: getHeaders('json'),\n      })\n      const members = response.data.data.memberNames\n      const products = response.data.data.productNames\n      setCommonLoader(false)\n      setProductList(products)\n      setPLoader(false)\n      setMLoader(false)\n      setMemberList(members)\n    } catch (error) {}\n  }\n\n  const getUrl = () => {\n    let url\n    switch (filterRef.current) {\n      case 'default':\n        url = `common/timesheet/activity/owner/list?page=${pageRef.current}&size=10&category=${filterRef.current}`\n        break\n      case 'all':\n        url = `common/timesheet/activity/owner/list?page=${pageRef.current}&size=10&category=${filterRef.current}&productId=${productIdRef.current}&memberId=${memberIdRef.current}&startDate=${startDateRef.current}&endDate=${endDateRef.current}`\n        break\n      case 'product':\n        url = `common/timesheet/activity/owner/list?page=${pageRef.current}&size=10&category=${filterRef.current}&productId=${productIdRef.current}`\n        break\n      case 'member':\n        url = `common/timesheet/activity/owner/list?page=${pageRef.current}&size=10&category=${filterRef.current}&memberId=${memberIdRef.current}`\n        break\n      case 'date':\n        url = `common/timesheet/activity/owner/list?page=${pageRef.current}&size=10&category=${filterRef.current}&startDate=${startDateRef.current}&endDate=${endDateRef.current}`\n        break\n      case 'dateandproduct':\n        url = `common/timesheet/activity/owner/list?page=${pageRef.current}&size=10&category=${filterRef.current}&productId=${productIdRef.current}&startDate=${startDateRef.current}&endDate=${endDateRef.current}`\n        break\n      case 'dateandmember':\n        url = `common/timesheet/activity/owner/list?page=${pageRef.current}&size=10&category=${filterRef.current}&memberId=${memberIdRef.current}&startDate=${startDateRef.current}&endDate=${endDateRef.current}`\n        break\n      case 'memberandproduct':\n        url = `common/timesheet/activity/owner/list?page=${pageRef.current}&size=10&category=${filterRef.current}&memberId=${memberIdRef.current}&productId=${productIdRef.current}`\n        break\n      default:\n        break\n    }\n    return url\n  }\n\n  const getProductActivityall = async () => {\n    let newAbortController\n    if (pageRef.current === 0) {\n      setCommonLoader(true)\n      setMemberTable([])\n      abortController.abort()\n      newAbortController = new AbortController()\n      setAbortController(newAbortController)\n    }\n    try {\n      const response = await api.get(getUrl(), {\n        headers: getHeaders('json'),\n        signal: newAbortController?.signal,\n      })\n      const data = response.data.data\n      if (pageRef.current === 0) {\n        setMemberTable(data)\n      } else {\n        setMemberTable((prevUserData) => {\n          const uniqueSet = new Set(prevUserData.map((user) => user.id))\n          const newData = data.filter((user) => !uniqueSet.has(user.id))\n          return [...prevUserData, ...newData]\n        })\n      }\n      if (data.length < 10) {\n        hasMoreRef.current = false\n      } else {\n        hasMoreRef.current = true\n      }\n      pageRef.current = pageRef.current + 1\n      setCommonLoader(false)\n    } catch (error) {}\n  }\n\n  let loaderContent\n  if (memberTable === null && !commonLoader) {\n    loaderContent = <div className=\"text-c text-center my-3 td-text\">No Data Found</div>\n  } else if (memberTable.length === 0 && !commonLoader) {\n    loaderContent = <div className=\"text-c text-center my-3 td-text\">No Data Found</div>\n  } else if (commonLoader) {\n    loaderContent = (\n      <div className=\"text-c text-center my-3 td-text\">\n        <CSpinner color=\"danger\" />\n      </div>\n    )\n  } else {\n    loaderContent = <div></div>\n  }\n\n  const statuschange = async (statusValue, id, remarks) => {\n    const url = `common/timesheet/approval/owner/update`\n    const formData = new FormData()\n    formData.append('status', statusValue)\n    formData.append('remarks', remarks)\n    formData.append('id', id)\n    try {\n      const response = await api.put(url, formData, {\n        headers: getHeaders('multi'),\n      })\n      if (response?.data) {\n        const message = `Activity ${statusValue} Successfully`\n        toast.success(message, {\n          position: toast.POSITION.BOTTOM_RIGHT,\n          autoClose: 3000,\n        })\n        return response.data\n      } else {\n        throw new Error('Empty response received from the server')\n      }\n    } catch (error) {\n      toast.error(error.message, {\n        position: toast.POSITION.BOTTOM_RIGHT,\n        autoClose: 3000,\n      })\n      throw error\n    }\n  }\n\n  const handleApproveActivity = async (status, id, remarks) => {\n    return await statuschange(rejectStatus, id, remarks)\n  }\n\n  const handleApproved = async (status, singleApprovedId, remarks) => {\n    return await statuschange(approvedStatus, singleApprovedId, remarks)\n  }\n\n  const resetFormValues = () => {\n    setSelectedRows([])\n    setOpen(false)\n    setOpenSelectAll(false)\n    setOpenSelectRejectAll(false)\n    setIsModalOpen(false)\n    setHeaderLabel('')\n    setCommonLoader(true)\n    pageRef.current = 0\n    hasMoreRef.current = true\n    filterRef.current = 'default'\n    setMemberList([])\n    setProductList(productLists)\n    getProductActivityall()\n  }\n\n  //Product List\n  const options = productList.map((product) => ({\n    value: product.id,\n    label: product.name,\n  }))\n\n  const handleProductList = async (value) => {\n    if (value !== 0) {\n      const url = `common/timesheet/activity/ownerlist/daterange/all?fromdate=${startDateRef.current}&todate=${endDateRef.current}&productid=${value}`\n      try {\n        const response = await api.get(url, {\n          headers: getHeaders('json'),\n        })\n        const member = response.data.data.memberNames\n        setMemberList(member)\n        setMLoader(false)\n      } catch (error) {}\n    }\n  }\n\n  const handleProduct = (product) => {\n    pageRef.current = 0\n    hasMoreRef.current = true\n    setMLoader(true)\n    setCommonLoader(true)\n    setMemberList([])\n    if (product !== undefined) {\n      productIdRef.current = product\n      if (startDateRef.current !== null && endDateRef.current !== null) handleProductList(product)\n      else setMemberList([])\n      setMLoader(false)\n      if (\n        startDateRef.current === null &&\n        endDateRef.current === null &&\n        memberIdRef.current === 0\n      ) {\n        filterRef.current = 'product'\n      } else if (\n        startDateRef.current === null &&\n        endDateRef.current === null &&\n        memberIdRef.current !== 0\n      ) {\n        filterRef.current = 'memberandproduct'\n      } else if (\n        startDateRef.current !== null &&\n        endDateRef.current !== null &&\n        memberIdRef.current === 0\n      ) {\n        filterRef.current = 'dateandproduct'\n      } else {\n        filterRef.current = 'all'\n      }\n    } else {\n      productIdRef.current = 0\n\n      if (\n        startDateRef.current === null &&\n        endDateRef.current === null &&\n        memberIdRef.current === 0\n      ) {\n        filterRef.current = 'default'\n      } else if (\n        startDateRef.current === null &&\n        endDateRef.current === null &&\n        memberIdRef.current !== 0\n      ) {\n        filterRef.current = 'member'\n      } else if (\n        startDateRef.current !== null &&\n        endDateRef.current !== null &&\n        memberIdRef.current === 0\n      ) {\n        filterRef.current = 'date'\n      } else {\n        filterRef.current = 'dateandmember'\n      }\n      setMLoader(false)\n\n      if (startDateRef.current !== null && endDateRef.current !== null) {\n        setPLoader(true)\n        setProductList([])\n        getProductMemberActivitywithdatewise(startDateRef.current, endDateRef.current)\n      }\n      setMemberList([])\n    }\n    selectRef.current.blur()\n    getProductActivityall()\n  }\n\n  // Member List\n  const memberOption = memberList.map((user) => ({\n    value: user.id,\n    label: (\n      <div className=\"select-options1\">\n        <img\n          src={user.profile_pic ? ImageUrl + user.profile_pic : profileImage1}\n          style={user.profile_pic ? { width: '29px' } : { width: '39px' }}\n          alt={user.name}\n          className=\"img-flag\"\n        />\n        <div className=\"node1\" style={user.profile_pic ? { marginLeft: '11px' } : {}}>\n          <p className=\"user-name1\" title={user.name}>\n            {toPascalCase(user.name)}\n          </p>\n          <p className=\"role-text1\">{user.role}</p>\n        </div>\n      </div>\n    ),\n  }))\n\n  const handleMember = (member) => {\n    pageRef.current = 0\n    hasMoreRef.current = true\n    setMemberTable([])\n    setCommonLoader(true)\n    if (member !== undefined) {\n      memberIdRef.current = member\n      if (\n        startDateRef.current === null &&\n        endDateRef.current === null &&\n        productIdRef.current === 0\n      ) {\n        filterRef.current = 'member'\n      } else if (\n        startDateRef.current === null &&\n        endDateRef.current === null &&\n        productIdRef.current !== 0\n      ) {\n        filterRef.current = 'memberandproduct'\n      } else if (\n        startDateRef.current !== null &&\n        endDateRef.current !== null &&\n        productIdRef.current === 0\n      ) {\n        filterRef.current = 'dateandmember'\n      } else {\n        filterRef.current = 'all'\n      }\n    } else {\n      memberIdRef.current = 0\n      if (\n        startDateRef.current === null &&\n        endDateRef.current === null &&\n        productIdRef.current === 0\n      ) {\n        filterRef.current = 'default'\n      } else if (\n        startDateRef.current === null &&\n        endDateRef.current === null &&\n        productIdRef.current !== 0\n      ) {\n        filterRef.current = 'product'\n      } else if (\n        startDateRef.current !== null &&\n        endDateRef.current !== null &&\n        productIdRef.current === 0\n      ) {\n        filterRef.current = 'date'\n      } else {\n        filterRef.current = 'dateandproduct'\n      }\n    }\n    selectRef.current.blur()\n    getProductActivityall()\n  }\n  const showModal = (id, status) => {\n    setIsModalOpen(true)\n    setSingleId(id)\n    setRejectStatus(status)\n  }\n\n  const handleCancel = () => {\n    setIsModalOpen(false)\n  }\n  const handleRejectCancelAll = () => {\n    setOpenSelectRejectAll(false)\n  }\n\n  return (\n    <>\n      <CRow className=\"mt-3\">\n        <CCol sm={5}>\n          <b style={{ marginLeft: '30px' }}>Pending Member&rsquo;s Activity</b>\n          <br />\n          <Breadcrumb\n            style={{ marginLeft: '30px' }}\n            className=\"bread-tab\"\n            separator={<span className=\"breadcrumb-separator\">|</span>}\n            items={[\n              {\n                title: (\n                  <Link\n                    rel=\"Dashboard\"\n                    to={'/dashboard'}\n                    className=\"bread-items text-decoration-none text-secondary \"\n                  >\n                    Dashboard\n                  </Link>\n                ),\n              },\n              {\n                title: (\n                  <span className=\"text-secondary breadcrumb_lable \" style={{ cursor: 'default' }}>\n                    Pending Member&rsquo;s Activity\n                  </span>\n                ),\n              },\n            ]}\n          />\n        </CCol>\n        {/* <CCol sm={1} style={{ marginLeft: '50px' }}></CCol> */}\n        <CCol sm={3}>\n          <RangePicker\n            variant={'borderless'}\n            ref={rangePickerRef}\n            style={{ width: '90%', marginRight: '5px' }}\n            onChange={handleStartDateChange}\n            disabledDate={(current) => current && current > dayjs().endOf('day')}\n            className=\"rangeField rangepicker_cont_pend\"\n            format=\"YYYY/MM/DD\"\n          />\n        </CCol>\n        <CCol sm={2}>\n          <Select\n            className=\"members_activity_select  custom-select_pend mem-act-select\"\n            suffixIcon={\n              <img src={Downarrowimg} alt=\"Downarrowimg\" style={{ width: '10px', height: '6px' }} />\n            }\n            id=\"products\"\n            value={options.find((option) => option.value === productIdRef.current) || undefined}\n            onChange={(value) => handleProduct(value)}\n            showSearch\n            allowClear\n            filterOption={(input, option) =>\n              option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n            options={\n              prodLoader || pLoader\n                ? [\n                    {\n                      label: (\n                        <div style={{ textAlign: 'center' }}>\n                          {Array.from({ length: 5 }, (_, index) => (\n                            <Skeleton\n                              key={index}\n                              title={false}\n                              paragraph={{\n                                rows: 1,\n                                width: '100%',\n                                height: '10px',\n                                style: { height: '10px !important' },\n                              }}\n                            />\n                          ))}\n                        </div>\n                      ),\n                      value: 'loading',\n                      disabled: true,\n                    },\n                  ]\n                : options\n            }\n            ref={selectRef}\n            placeholder=\"Choose Product\"\n            getPopupContainer={(triggerNode) => triggerNode.parentNode}\n          />\n        </CCol>\n\n        <CCol sm={2}>\n          <Select\n            className=\"members_activity_select custom-select_pend mem-act-select\"\n            id=\"member-list\"\n            value={memberOption.find((option) => option.value === memberIdRef.current) || undefined}\n            onChange={(value) => handleMember(value)}\n            options={\n              mLoader\n                ? [\n                    {\n                      label: (\n                        <div style={{ textAlign: 'center' }}>\n                          {Array.from({ length: 5 }, (_, index) => (\n                            <Skeleton\n                              key={index}\n                              title={false}\n                              avatar={{\n                                size: '20',\n                              }} // Adjust the width and height here\n                              paragraph={{\n                                rows: 2,\n                                height: '10px',\n                                style: { height: '10px !important' },\n                              }}\n                            />\n                          ))}\n                        </div>\n                      ),\n                      value: 'loading',\n                      disabled: true,\n                    },\n                  ]\n                : memberOption\n            }\n            showSearch\n            ref={selectRef}\n            suffixIcon={\n              <img src={Downarrowimg} alt=\"Downarrowimg\" style={{ width: '10px', height: '6px' }} />\n            }\n            placeholder=\"Choose Member\"\n            allowClear\n            filterOption={(input, option) => {\n              const userNameArray = option.label.props.children[1].props.children[0].props.children\n              const userName = userNameArray\n              const lowerCaseInput = input.toLowerCase()\n              const lowerCaseUserName = userName.toLowerCase()\n              return lowerCaseUserName.includes(lowerCaseInput)\n            }}\n            popupMatchSelectWidth={false}\n            popupClassName=\"custom-dropdown\"\n            getPopupContainer={(triggerNode) => triggerNode.parentNode}\n          />\n        </CCol>\n      </CRow>\n      <div className=\"table-container table_scroll mt-2\" style={{ border: 'none' }}>\n        <InfiniteScroll\n          dataLength={memberTable.length}\n          next={handleScroll}\n          hasMore={hasMoreRef.current}\n          loader={\n            <div className=\"text-c text-center my-3 td-text\">\n              <CSpinner color=\"danger\" />\n            </div>\n          }\n          endMessage={\n            memberTable.length !== 0 && (\n              <p style={{ textAlign: 'center' }}>\n                <b style={{ color: '#e40e2d', fontSize: '12px' }}>No more Data to load</b>\n              </p>\n            )\n          }\n        >\n          <CTable>\n            <CTableHead className=\"head-row\">\n              {!headerLabel ? (\n                <CTableRow>\n                  {memberTable === null || memberTable.length === 0 ? (\n                    <CTableHeaderCell\n                      className=\"table-head-draft  text-c text-center grid-cell-header check_box_position\"\n                      scope=\"col\"\n                      width=\"4%\"\n                    >\n                      <Checkbox\n                        id=\"flexCheckDefault\"\n                        onChange={(e) => handleHeaderCheck(e.target.checked)}\n                        disabled={true}\n                      />\n                    </CTableHeaderCell>\n                  ) : (\n                    <CTableHeaderCell\n                      className=\"table-head-draft text-center text-c grid-cell-header\"\n                      scope=\"col\"\n                      width=\"4%\"\n                      style={{ position: 'sticky', top: '0', zIndex: '12' }}\n                    >\n                      <Checkbox\n                        id=\"flexCheckDefault\"\n                        className=\"checkbox_design\"\n                        checked={selectedRows.length === memberTable.length && memberTable.length}\n                        onChange={(e) => handleHeaderCheck(e.target.checked)}\n                      />\n                    </CTableHeaderCell>\n                  )}\n\n                  <CTableHeaderCell\n                    className=\"table-head-draft  text-c grid-cell-header text-center\"\n                    scope=\"col\"\n                    width=\"4%\"\n                  >\n                    SI.No\n                  </CTableHeaderCell>\n                  <CTableHeaderCell\n                    className=\"table-head-draft  text-c grid-cell-header\"\n                    scope=\"col\"\n                    width=\"10%\"\n                  >\n                    Activity Date\n                  </CTableHeaderCell>\n                  <CTableHeaderCell\n                    className=\"table-head-draft  text-c grid-cell-header\"\n                    scope=\"col\"\n                    width=\"12%\"\n                  >\n                    Team member\n                  </CTableHeaderCell>\n                  <CTableHeaderCell\n                    className=\"table-head-draft  text-c grid-cell-header\"\n                    scope=\"col\"\n                    width=\"15%\"\n                  >\n                    Product\n                  </CTableHeaderCell>\n                  <CTableHeaderCell\n                    className=\"table-head-draft  text-c grid-cell-header\"\n                    scope=\"col\"\n                    width=\"10%\"\n                  >\n                    Task\n                  </CTableHeaderCell>\n                  <CTableHeaderCell\n                    className=\"table-head-draft  text-c grid-cell-header\"\n                    scope=\"col\"\n                    width=\"5%\"\n                  >\n                    No.of.Hours\n                  </CTableHeaderCell>\n                  {/* <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header\"\n                  scope=\"col\"\n                  width=\"10%\"\n                >\n                  Status\n                </CTableHeaderCell> */}\n                  <CTableHeaderCell\n                    className=\"table-head-draft  text-c grid-cell-header\"\n                    scope=\"col\"\n                    width=\"15%\"\n                  >\n                    Remarks\n                  </CTableHeaderCell>\n                  <CTableHeaderCell\n                    className=\"table-head-draft  text-c grid-cell-header text-center\"\n                    scope=\"col\"\n                    width=\"7%\"\n                  >\n                    Action\n                  </CTableHeaderCell>\n                </CTableRow>\n              ) : (\n                <CTableRow>\n                  <CTableHeaderCell className=\"table-head-selected text-center  text-c \" width=\"4%\">\n                    <Checkbox\n                      id=\"flexCheckDefault\"\n                      className=\"checkbox_design\"\n                      checked={selectedRows.length === memberTable.length && memberTable.length}\n                      onChange={(e) => handleHeaderCheck(e.target.checked)}\n                    />\n                  </CTableHeaderCell>\n                  <CTableHeaderCell className=\"table-head-selected  text-c \" colSpan=\"7\">\n                    <span style={{ color: '#f50505' }}>{headerLabel}</span>\n                  </CTableHeaderCell>\n                  <CTableHeaderCell className=\"table-head-selected \" style={{ textAlign: 'right' }}>\n                    <div\n                      style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n                    >\n                      {/* <Popconfirm\n                      title=\"Approve confirm Modal\"\n                      description=\"Are you sure to approve this activity ?\"\n                      open={openSelectAll}\n                      onConfirm={() => handleButtonClick('Approved')}\n                      okButtonProps={{\n                        style: { background: '#f54550', borderColor: '#f54550', color: 'white' },\n                        loading: confirmLoading,\n                      }}\n                      placement=\"left\"\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                      onCancel={handleApproveCancelAll}\n                    > */}\n                      <button\n                        className=\"btn border-0 text-c text-secondary check-button\"\n                        style={{ fontSize: '12px', padding: '4px 8px' }}\n                        type=\"button\"\n                        onClick={() => showPopconfirmAll('Approved')}\n                      >\n                        <CheckSvg width=\"11\" height=\"9\" viewBox=\"0 0 14 10\" fill=\"#00ab55\" />\n                      </button>\n                      {/* </Popconfirm> */}\n                      <button\n                        className=\"btn border-0 text-c text-secondary cross-button\"\n                        style={{ fontSize: '12px', padding: '4px 8px' }}\n                        onClick={() => showPopconfirmAll('Reject')}\n                      >\n                        <CrossSvg width=\"9\" height=\"11\" viewBox=\"0 0 14 10\" fill=\"#e40e2d\" />\n                      </button>\n                    </div>\n                  </CTableHeaderCell>\n                </CTableRow>\n              )}\n            </CTableHead>\n            <CTableBody>\n              {memberTable?.map((row, index) => (\n                <CTableRow key={row.id}>\n                  <CTableDataCell\n                    className={`text-c text-center pd-text1 grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    width=\"4%\"\n                  >\n                    <Checkbox\n                      className=\"checkbox_design\"\n                      id={`flexCheckDefault-${index}`}\n                      value={row.id}\n                      disabled={\n                        row.status === 'Approved' ||\n                        row.status === 'Rejected' ||\n                        row.approved === true\n                      }\n                      checked={selectedRows.includes(row.id)}\n                      onChange={(e) => {\n                        handleMemberCheck(row.id, e.target.checked)\n                      }}\n                    />\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className={`text-c text-center pd-text1 grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    width=\"4%\"\n                  >\n                    {index + 1}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className={`text-c pd-text1 grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    title={row.activity_date}\n                    width=\"10%\"\n                  >\n                    {formatDate(row.activity_date)}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className={`text-c pd-text1 grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    title={toPascalCase(row.userName)}\n                    width=\"12%\"\n                  >\n                    {toPascalCase(row.userName)}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className={`text-c pd-text1 grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    title={row.productName}\n                    width=\"15%\"\n                  >\n                    <span>\n                      {row.assignedStatus === true && (\n                        <span style={{ fontSize: '16px', color: '#00ab55' }}>&#8226;</span>\n                      )}\n                      {row.assignedStatus === false && (\n                        <span style={{ fontSize: '16px', color: '#ffaa00' }}>&#8226;</span>\n                      )}\n                      <span style={{ marginLeft: '5px' }}>{row.productName}</span>\n                    </span>\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className={`text-c pd-text1 grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    title={row.taskName}\n                    width=\"10%\"\n                  >\n                    {row.taskName}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className={`text-c pd-text1 text-center grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    title={formatTimeDuration(row.hours)}\n                    width=\"5%\"\n                  >\n                    {formatTimeDuration(row.hours)}\n                  </CTableDataCell>\n                  {/* <CTableDataCell\n                    className={`text-c grid-cell ${\n                      row.status === 'Approved'\n                        ? 'green-text1 '\n                        : row.status === 'Pending'\n                        ? 'warning-text1 '\n                        : row.status === 'Completed'\n                        ? 'green-text1 '\n                        : ''\n                    }${selectedRows.includes(row.id) ? 'checked-table-row' : ''}`}\n                    width=\"10%\"\n                  >\n                    <span>\n                      {row.status === 'Approved' && (\n                        <span style={{ fontSize: '20px' }}>&#8226;</span>\n                      )}\n                      {row.status === 'Pending' && (\n                        <span style={{ fontSize: '20px' }}>&#8226;</span>\n                      )}\n                      {row.status === 'Completed' && (\n                        <span style={{ fontSize: '20px' }}>&#8226;</span>\n                      )}\n                      <span style={{ marginLeft: '5px' }}>{row.status}</span>\n                    </span>\n                  </CTableDataCell> */}\n                  <CTableDataCell\n                    className={`text-c pd-text1 grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    title={row.description}\n                    width=\"15%\"\n                  >\n                    {row.description}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className={`text-c pd-text1 text-center grid-cell ${\n                      selectedRows.includes(row.id) ? 'checked-table-row' : ''\n                    }`}\n                    width=\"7%\"\n                  >\n                    {/* <Popconfirm\n                      title=\"Approve confirm Modal\"\n                      description=\"Are you sure to approve this activity ?\"\n                      open={open === row.id}\n                      onConfirm={() => handleApproved('Approved', row.id)}\n                      okButtonProps={{\n                        style: { background: '#f54550', borderColor: '#f54550', color: 'white' },\n                        loading: confirmLoading,\n                      }}\n                      placement=\"left\"\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                      onCancel={handleApproveCancel}\n                    > */}\n                    <button\n                      className=\"btn border-0 text-c text-secondary check-button\"\n                      style={{ fontSize: '12px', padding: '4px 8px' }}\n                      disabled={selectedRows.includes(row.id)}\n                      onClick={() => showPopconfirm('Approved', row.id)}\n                    >\n                      <CheckSvg width=\"11\" height=\"9\" viewBox=\"0 0 14 10\" fill=\"#A5A1A1\" />\n                    </button>\n                    {/* </Popconfirm> */}\n\n                    <button\n                      className=\"btn border-0 text-c text-secondary cross-button\"\n                      style={{ fontSize: '12px', padding: '4px 8px' }}\n                      onClick={() => showModal(row.id, 'Reject')}\n                      disabled={selectedRows.includes(row.id)}\n                    >\n                      <CrossSvg width=\"9\" height=\"11\" viewBox=\"0 0 14 10\" fill=\"#A5A1A1\" />\n                    </button>\n                  </CTableDataCell>\n                </CTableRow>\n              ))}\n            </CTableBody>\n          </CTable>\n          {loaderContent}\n        </InfiniteScroll>\n      </div>\n      {isModalOpen && (\n        <RejectConfirmModal\n          isModalOpen={isModalOpen}\n          handleCancel={handleCancel}\n          handleApprove={handleApproveActivity}\n          id={singleId}\n          headContent=\"Activity\"\n          resetFunc={resetFormValues}\n        />\n      )}\n      {open && (\n        <ApprovedConfirmModal\n          isModalOpen={open}\n          handleCancel={handleApproveCancel}\n          handleApprove={handleApproved}\n          id={singleApprovedId}\n          headContent=\"Activity\"\n          resetFunc={resetFormValues}\n        />\n      )}\n      {openSelectAll && (\n        <ApprovedConfirmModal\n          isModalOpen={openSelectAll}\n          handleCancel={handleApproveCancelAll}\n          handleApprove={handleButtonClick}\n          headContent=\"Activity\"\n          resetFunc={resetFormValues}\n        />\n      )}\n      {openSelectRejectAll && (\n        <RejectConfirmModal\n          isModalOpen={openSelectRejectAll}\n          handleCancel={handleRejectCancelAll}\n          handleApprove={handleButtonClick}\n          headContent=\"Activity\"\n          resetFunc={resetFormValues}\n        />\n      )}\n    </>\n  )\n}\n\nPendingActivity.propTypes = {\n  formatDate: PropTypes.func,\n  productLists: PropTypes.array,\n  prodLoader: PropTypes.bool,\n}\nexport default PendingActivity\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Select, DatePicker, Breadcrumb, Skeleton } from 'antd'\nimport {\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CSpinner,\n} from '@coreui/react'\nimport { getHeaders } from 'src/constant/Global'\n// import profileImage1 from '../../assets/images/avatars/wrapper.png'\nimport 'react-toastify/dist/ReactToastify.css'\nimport PropTypes from 'prop-types'\nimport useAxios from 'src/constant/UseAxios'\nimport Downarrowimg from '../../assets/images/downarrow.png'\nimport { toPascalCase, formatTimeDuration } from '../../constant/TimeUtils'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport dayjs from 'dayjs'\nimport { Link } from 'react-router-dom'\n\nconst ClosedActivity = ({ formatDate, productLists, prodLoader }) => {\n  let api = useAxios()\n  const [memberTable, setMemberTable] = useState([])\n  const [productList, setProductList] = useState([])\n  const [commonLoader, setCommonLoader] = useState(true)\n  const selectRef = useRef(null)\n  const dateRef = useRef(null)\n  const statusRef = useRef('all')\n  const pageRef = useRef(0)\n  const productIdRef = useRef(0)\n  const memberIdRef = useRef(0)\n  const filterRef = useRef('default')\n  const hasMoreRef = useRef(true)\n  const [abortController, setAbortController] = useState(new AbortController())\n\n  useEffect(() => {\n    setProductList(productLists)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [productLists])\n\n  useEffect(() => {\n    hasMoreRef.current = true\n    getMemberActivityall()\n    const tableContainer = document.querySelector('.table-container')\n    tableContainer.addEventListener('scroll', handleScroll)\n    return () => {\n      tableContainer.removeEventListener('scroll', handleScroll)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleScroll = () => {\n    const tableContainer = document.querySelector('.table-container')\n    if (tableContainer.scrollTop + tableContainer.clientHeight === tableContainer.scrollHeight) {\n      if (hasMoreRef.current === true) {\n        getMemberActivityall()\n      }\n    }\n  }\n\n  let loaderContent\n  if (memberTable === null && !commonLoader) {\n    loaderContent = <div className=\"text-c text-center my-3 td-text\">No Data Found</div>\n  } else if (memberTable.length === 0 && !commonLoader) {\n    loaderContent = <div className=\"text-c text-center my-3 td-text\">No Data Found</div>\n  } else if (commonLoader) {\n    loaderContent = (\n      <div className=\"text-c text-center my-3 td-text\">\n        <CSpinner color=\"danger\" />\n      </div>\n    )\n  } else {\n    loaderContent = <div></div>\n  }\n\n  const getMemberActivityall = async () => {\n    let newAbortController\n    if (pageRef.current === 0) {\n      setCommonLoader(true)\n      setMemberTable([])\n      abortController.abort()\n      newAbortController = new AbortController()\n      setAbortController(newAbortController)\n    }\n    let url\n    if (dateRef.current !== null) {\n      url = `common/timesheet/approval/owner/status?page=${pageRef.current}&size=10&category=${filterRef.current}&status=${statusRef.current}&productId=${productIdRef.current}&memberId=${memberIdRef.current}&date=${dateRef.current}`\n    } else {\n      url = `common/timesheet/approval/owner/status?page=${pageRef.current}&size=10&category=${filterRef.current}&productId=${productIdRef.current}&memberId=${memberIdRef.current}&status=${statusRef.current}`\n    }\n    try {\n      const response = await api.get(url, {\n        headers: getHeaders('json'),\n        signal: newAbortController?.signal,\n      })\n      const data = response.data.data\n      if (pageRef.current === 0) {\n        setMemberTable(data)\n      } else {\n        setMemberTable((prevUserData) => {\n          const uniqueSet = new Set(prevUserData.map((user) => user.id))\n          const newData = data.filter((user) => !uniqueSet.has(user.id))\n          return [...prevUserData, ...newData]\n        })\n      }\n      if (data.length < 10) {\n        hasMoreRef.current = false\n      } else {\n        hasMoreRef.current = true\n      }\n      pageRef.current = pageRef.current + 1\n      setCommonLoader(false)\n    } catch (error) {}\n  }\n\n  //Product List\n  const options = productList.map((product) => ({\n    value: product.id,\n    label: product.name,\n  }))\n  const handleProduct = (product) => {\n    selectRef.current.blur()\n    pageRef.current = 0\n    hasMoreRef.current = true\n    setMemberTable([])\n    setCommonLoader(true)\n    if (product !== undefined) {\n      productIdRef.current = product\n      if (dateRef.current === null && memberIdRef.current === 0) {\n        filterRef.current = 'product'\n      } else if (dateRef.current === null && memberIdRef.current !== 0) {\n        filterRef.current = 'memberandproduct'\n      } else if (dateRef.current !== null && memberIdRef.current === 0) {\n        filterRef.current = 'dateandproduct'\n      } else if (dateRef.current !== null && memberIdRef.current !== 0) {\n        filterRef.current = 'all'\n      }\n    } else {\n      productIdRef.current = 0\n      if (dateRef.current === null && memberIdRef.current === 0) {\n        filterRef.current = 'default'\n      } else if (dateRef.current === null && memberIdRef.current !== 0) {\n        filterRef.current = 'member'\n      } else if (dateRef.current !== null && memberIdRef.current === 0) {\n        filterRef.current = 'date'\n      } else if (dateRef.current !== null && memberIdRef.current !== 0) {\n        filterRef.current = 'dateandmember'\n      }\n    }\n    getMemberActivityall()\n  }\n\n  const handleDateChange = (date, dateString) => {\n    pageRef.current = 0\n    hasMoreRef.current = true\n    setMemberTable([])\n    setCommonLoader(true)\n    if (date !== null) {\n      const formattedDate = dayjs(date).format('YYYY-MM-DD')\n      dateRef.current = formattedDate\n      if (productIdRef.current !== 0 && memberIdRef.current === 0) {\n        filterRef.current = 'dateandproduct'\n      } else if (productIdRef.current === 0 && memberIdRef.current !== 0) {\n        filterRef.current = 'dateandmember'\n      } else if (productIdRef.current === 0 && memberIdRef.current === 0) {\n        filterRef.current = 'date'\n      } else if (productIdRef.current !== 0 && statusRef.current !== '') {\n        filterRef.current = 'all'\n      }\n    } else {\n      dateRef.current = null\n      if (productIdRef.current !== 0 && memberIdRef.current === 0) {\n        filterRef.current = 'product'\n      } else if (productIdRef.current === 0 && memberIdRef.current !== 0) {\n        filterRef.current = 'member'\n      } else if (productIdRef.current === 0 && memberIdRef.current === 0) {\n        filterRef.current = 'default'\n      } else if (productIdRef.current !== 0 && memberIdRef.current !== 0) {\n        filterRef.current = 'memberandproduct'\n      }\n    }\n    getMemberActivityall()\n  }\n\n  const handleStatus = (value) => {\n    pageRef.current = 0\n    hasMoreRef.current = true\n    setMemberTable([])\n    setCommonLoader(true)\n    if (value !== undefined) {\n      statusRef.current = value\n    } else {\n      statusRef.current = 'all'\n    }\n    getMemberActivityall()\n  }\n  return (\n    <>\n      <CRow className=\"mt-3\">\n        <CCol sm={6}>\n          <b style={{ marginLeft: '30px' }}>Closed Activity</b>\n          <br />\n          <Breadcrumb\n            style={{ marginLeft: '30px' }}\n            className=\"bread-tab\"\n            separator={<span className=\"breadcrumb-separator\">|</span>}\n            items={[\n              {\n                title: (\n                  <Link\n                    rel=\"Dashboard\"\n                    to={'/dashboard'}\n                    className=\"bread-items text-decoration-none text-secondary \"\n                  >\n                    Dashboard\n                  </Link>\n                ),\n              },\n              {\n                title: (\n                  <span className=\"text-secondary \" style={{ cursor: 'default' }}>\n                    Closed Activity\n                  </span>\n                ),\n              },\n            ]}\n          />\n        </CCol>\n\n        <CCol sm={2}>\n          <DatePicker\n            variant={'borderless'}\n            className=\"dateField_close date_picker_clo \"\n            onChange={handleDateChange}\n            placeholder=\"Choose Date\"\n            allowClear\n            format=\"DD MMM,YYYY\"\n          />\n        </CCol>\n        <CCol sm={2}>\n          <Select\n            className=\"contract_members_activity_select custom-select_pend mem-act-select\"\n            suffixIcon={\n              <img src={Downarrowimg} alt=\"Downarrowimg\" style={{ width: '10px', height: '6px' }} />\n            }\n            variant={'borderless'}\n            id=\"products\"\n            value={options.find((option) => option.value === productIdRef.current) || undefined}\n            onChange={(value) => handleProduct(value)}\n            showSearch\n            allowClear\n            filterOption={(input, option) =>\n              option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n            dropdownRender={(menu) => (\n              <div style={{ maxHeight: '120px', overflow: 'auto' }} role=\"listbox\">\n                {menu}\n              </div>\n            )}\n            ref={selectRef}\n            options={\n              prodLoader\n                ? [\n                    {\n                      label: (\n                        <div style={{ textAlign: 'center' }}>\n                          {Array.from({ length: 5 }, (_, index) => (\n                            <Skeleton\n                              key={index}\n                              title={false}\n                              paragraph={{\n                                rows: 1,\n                                width: '100%',\n                                height: '10px',\n                                style: { height: '10px !important' },\n                              }}\n                            />\n                          ))}\n                        </div>\n                      ),\n                      value: 'loading',\n                      disabled: true,\n                    },\n                  ]\n                : options\n            }\n            placeholder=\"Choose Product\"\n            getPopupContainer={(triggerNode) => triggerNode.parentNode}\n          />\n        </CCol>\n        {/* <CCol sm={2}>\n          <Select\n            variant={'borderless'}\n            className=\"contract_members_activity_select custom-select_pend mem-act-select\"\n            id=\"member-list\"\n            suffixIcon={\n              <img src={Downarrowimg} alt=\"Downarrowimg\" style={{ width: '10px', height: '6px' }} />\n            }\n            value={memberOption.find((option) => option.value === memberIdRef.current) || undefined}\n            onChange={(value) => handleMember(value)}\n            options={\n              memberLoader\n                ? [\n                    {\n                      label: (\n                        <div style={{ textAlign: 'center' }}>\n                          {Array.from({ length: 5 }, (_, index) => (\n                            <Skeleton\n                              key={index}\n                              title={false}\n                              avatar={{\n                                size: '20',\n                              }} // Adjust the width and height here\n                              paragraph={{\n                                rows: 2,\n                                height: '10px',\n                                style: { height: '10px !important' },\n                              }}\n                            />\n                          ))}\n                        </div>\n                      ),\n                      value: 'loading',\n                      disabled: true,\n                    },\n                  ]\n                : memberOption\n            }\n            showSearch\n            placeholder=\"Choose Member\"\n            allowClear\n            ref={selectRef}\n            popupMatchSelectWidth={false}\n            filterOption={(input, option) => {\n              const userNameArray = option.label.props.children[1].props.children[0].props.children\n              const userName = userNameArray\n              const lowerCaseInput = input.toLowerCase()\n              const lowerCaseUserName = userName.toLowerCase()\n              return lowerCaseUserName.includes(lowerCaseInput)\n            }}\n            popupClassName=\"custom-dropdown\"\n            getPopupContainer={(triggerNode) => triggerNode.parentNode}\n          />\n        </CCol> */}\n        <CCol sm={2}>\n          <Select\n            suffixIcon={\n              <img src={Downarrowimg} alt=\"Downarrowimg\" style={{ width: '10px', height: '6px' }} />\n            }\n            className=\"contract_members_activity_select custom-select_pend mem-act-select\"\n            allowClear\n            placeholder=\"Choose Status\"\n            options={[\n              {\n                value: 'Approved',\n                label: 'Approved',\n              },\n              {\n                value: 'Rejected',\n                label: 'Rejected',\n              },\n            ]}\n            onChange={(value) => handleStatus(value)}\n          />\n        </CCol>\n      </CRow>\n      <div className=\"table-container table_scroll mt-2\" style={{ border: 'none' }}>\n        <InfiniteScroll\n          dataLength={memberTable.length}\n          next={handleScroll}\n          hasMore={hasMoreRef.current}\n          loader={\n            <div className=\"text-c text-center my-3 td-text\">\n              <CSpinner color=\"danger\" />\n            </div>\n          }\n          endMessage={\n            memberTable.length !== 0 && (\n              <p style={{ textAlign: 'center' }}>\n                <b style={{ color: '#e40e2d', fontSize: '12px' }}>No more Data to load</b>\n              </p>\n            )\n          }\n        >\n          <CTable>\n            <CTableHead className=\"head-row\">\n              <CTableRow>\n                <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header text-center\"\n                  scope=\"col\"\n                  width=\"4%\"\n                >\n                  SI.No\n                </CTableHeaderCell>\n                <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header\"\n                  scope=\"col\"\n                  width=\"10%\"\n                >\n                  Activity Date\n                </CTableHeaderCell>\n                <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header\"\n                  scope=\"col\"\n                  width=\"12%\"\n                >\n                  Team member\n                </CTableHeaderCell>\n                <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header\"\n                  scope=\"col\"\n                  width=\"15%\"\n                >\n                  Product\n                </CTableHeaderCell>\n                <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header\"\n                  scope=\"col\"\n                  width=\"10%\"\n                >\n                  Task\n                </CTableHeaderCell>\n                <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header\"\n                  scope=\"col\"\n                  width=\"5%\"\n                >\n                  No.of.Hours\n                </CTableHeaderCell>\n                {/* <CTableHeaderCell\n                className=\"table-head-draft  text-c grid-cell-header\"\n                scope=\"col\"\n                width=\"10%\"\n              >\n                Status\n              </CTableHeaderCell> */}\n                <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header\"\n                  scope=\"col\"\n                  width=\"12%\"\n                >\n                  Approver Status\n                </CTableHeaderCell>\n                <CTableHeaderCell\n                  className=\"table-head-draft  text-c grid-cell-header\"\n                  scope=\"col\"\n                  width=\"15%\"\n                >\n                  Remarks\n                </CTableHeaderCell>\n              </CTableRow>\n            </CTableHead>\n            <CTableBody>\n              {memberTable?.map((row, index) => (\n                <CTableRow key={row.id}>\n                  <CTableDataCell className=\"text-c pd-text1 grid-cell text-center\" width=\"4%\">\n                    {index + 1}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className=\"text-c pd-text1 grid-cell\"\n                    title={row.activity_date}\n                    width=\"10%\"\n                  >\n                    {formatDate(row.activity_date)}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className=\"text-c pd-text1 grid-cell\"\n                    title={toPascalCase(row.task_user_name)}\n                    width=\"12%\"\n                  >\n                    {toPascalCase(row.task_user_name)}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className=\"text-c pd-text1 grid-cell\"\n                    title={row.productName}\n                    width=\"15%\"\n                  >\n                    <span>\n                      {row.assignedStatus === true && (\n                        <span style={{ fontSize: '16px', color: '#00ab55' }}>&#8226;</span>\n                      )}\n                      {row.assignedStatus === false && (\n                        <span style={{ fontSize: '16px', color: '#ffaa00' }}>&#8226;</span>\n                      )}\n                      <span style={{ marginLeft: '5px' }}>{row.productName}</span>\n                    </span>\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className=\"text-c pd-text1 grid-cell\"\n                    title={row.taskName}\n                    width=\"10%\"\n                  >\n                    {row.taskName}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className=\"text-c pd-text1  text-center grid-cell\"\n                    title={row.hours}\n                    width=\"5%\"\n                  >\n                    {formatTimeDuration(row.hours)}\n                  </CTableDataCell>\n                  {/* <CTableDataCell\n                    className={`text-c grid-cell ${\n                      row.status === 'Approved'\n                        ? 'green-text1 '\n                        : row.status === 'Pending'\n                        ? 'warning-text1 '\n                        : row.status === 'Completed'\n                        ? 'green-text1 '\n                        : ''\n                    }`}\n                    width=\"10%\"\n                  >\n                    <span>\n                      {row.status === 'Approved' && (\n                        <span style={{ fontSize: '20px' }}>&#8226;</span>\n                      )}\n                      {row.status === 'Pending' && (\n                        <span style={{ fontSize: '20px' }}>&#8226;</span>\n                      )}\n                      {row.status === 'Completed' && (\n                        <span style={{ fontSize: '20px' }}>&#8226;</span>\n                      )}\n                    </span>\n                    <span style={{ marginLeft: '5px' }}>{row.status}</span>\n                  </CTableDataCell> */}\n                  <CTableDataCell\n                    className={`text-c grid-cell ${\n                      row.supervisor_approved === 'Approved'\n                        ? 'green-text1 '\n                        : row.supervisor_approved === 'Reject'\n                        ? 'red-text1 '\n                        : ''\n                    }`}\n                    width=\"10%\"\n                  >\n                    {row.supervisor_approved === 'Approved' && (\n                      <span>\n                        <span style={{ fontSize: '20px' }}>&#8226;</span>\n                        <span style={{ marginLeft: '5px' }}>Approved</span>\n                      </span>\n                    )}\n                    {row.supervisor_approved === 'Reject' && (\n                      <span>\n                        <span style={{ fontSize: '20px' }}>&#8226;</span>\n                        <span style={{ marginLeft: '5px' }}>Rejected</span>\n                      </span>\n                    )}\n                  </CTableDataCell>\n                  <CTableDataCell\n                    className=\"text-c grid-cell pd-text1\"\n                    title={row.description}\n                    width=\"15%\"\n                  >\n                    {row.description}\n                  </CTableDataCell>\n                </CTableRow>\n              ))}\n            </CTableBody>\n          </CTable>\n          {loaderContent}\n        </InfiniteScroll>\n      </div>\n    </>\n  )\n}\n\nClosedActivity.propTypes = {\n  formatDate: PropTypes.func,\n  productLists: PropTypes.array,\n  prodLoader: PropTypes.bool,\n}\nexport default ClosedActivity\n","import React, { useState, useEffect } from 'react'\nimport { CCard, CCol, CRow, CNavItem, CTabContent, CTabPane, CNav, CNavLink } from '@coreui/react'\nimport { getHeaders } from 'src/constant/Global'\nimport { ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport PendingActivity from './PendingActivity'\nimport ClosedActivity from './ClosedActivity'\nimport useAxios from 'src/constant/UseAxios'\n\nconst ContractMembersActivity = () => {\n  let api = useAxios()\n  const [productList, setProductList] = useState([])\n  const [activeKey, setActiveKey] = useState(1)\n  const [prodLoader, setProdLoader] = useState(true)\n\n  useEffect(() => {\n    getproductList()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const getproductList = async () => {\n    const url = `product/approvedlist`\n    await api\n      .get(url, {\n        headers: getHeaders('json'),\n      })\n      .then((response) => {\n        const product = response.data.data\n        setProductList(product)\n        setProdLoader(false)\n      })\n      .catch((error) => {})\n  }\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString)\n    const options = { day: 'numeric', month: 'short', year: 'numeric' }\n    let formattedDate = date.toLocaleDateString('en-GB', options)\n    if (!formattedDate.includes(',')) {\n      formattedDate = formattedDate.replace(/(\\w{3}) (\\d{4})/, '$1, $2')\n    }\n    return formattedDate\n  }\n\n  return (\n    <>\n      <ToastContainer />\n      <CRow className=\"my-2\">\n        <CCol xs={12}>\n          <CCard className=\"mt-4 memberActivity-content\">\n            <div>\n              <CNav variant=\"pills\" role=\"tablist\">\n                <CNavItem role=\"presentation2\">\n                  <CNavLink\n                    className=\"nav-link-lable\"\n                    active={activeKey === 1}\n                    component=\"button\"\n                    role=\"tab\"\n                    aria-controls=\"home-tab-pane\"\n                    aria-selected={activeKey === 1}\n                    onClick={() => setActiveKey(1)}\n                  >\n                    Pending Activity\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem role=\"presentation1\">\n                  <CNavLink\n                    active={activeKey === 2}\n                    component=\"button\"\n                    role=\"tab\"\n                    aria-controls=\"profile-tab-pane\"\n                    aria-selected={activeKey === 2}\n                    onClick={() => setActiveKey(2)}\n                  >\n                    Closed activity\n                  </CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane\n                  role=\"tabpanel\"\n                  aria-labelledby=\"home-tab-pane\"\n                  visible={activeKey === 1}\n                  className=\"pendingactivity-card tab_height\"\n                >\n                  <CRow>\n                    {activeKey === 1 && (\n                      <PendingActivity\n                        formatDate={formatDate}\n                        productLists={productList}\n                        prodLoader={prodLoader}\n                      />\n                    )}\n                  </CRow>\n                </CTabPane>\n                <CTabPane\n                  role=\"tabpanel\"\n                  aria-labelledby=\"profile-tab-pane\"\n                  visible={activeKey === 2}\n                  className=\"pendingactivity-card tab_height\"\n                >\n                  <CRow>\n                    {activeKey === 2 && (\n                      <ClosedActivity\n                        formatDate={formatDate}\n                        productLists={productList}\n                        prodLoader={prodLoader}\n                      />\n                    )}\n                  </CRow>\n                </CTabPane>\n              </CTabContent>\n            </div>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default ContractMembersActivity\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst CheckSvg = ({ width, height, fill, viewBox }) => (\n  <svg\n    width={width}\n    height={height}\n    viewBox={viewBox}\n    fill={fill}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M4.87459 9.58157C5.2816 9.58171 5.67193 9.41992 5.95949 9.13188L12.9552 2.13716L12.9553 2.13712C13.3482 1.74402 13.3482 1.10682 12.9553 0.713727L12.9552 0.713671C12.5621 0.320704 11.9249 0.320704 11.5318 0.713671L11.5318 0.713699L4.87459 7.37091L2.4682 4.96451L2.46817 4.96448C2.07508 4.57151 1.43788 4.57151 1.04478 4.96448L1.04473 4.96454C0.651758 5.35763 0.651758 5.99483 1.04473 6.38793L1.04479 6.38799L3.7897 9.13188C3.78971 9.1319 3.78972 9.13191 3.78973 9.13192C4.07729 9.41994 4.46761 9.58171 4.87459 9.58157ZM4.87459 9.58157C4.87456 9.58157 4.87453 9.58157 4.87449 9.58157L4.87459 9.33157L4.8747 9.58157C4.87466 9.58157 4.87463 9.58157 4.87459 9.58157Z\"\n      fill={fill}\n      stroke=\"#A5A1A1\"\n      strokeWidth=\"0.5\"\n    />\n  </svg>\n)\nCheckSvg.propTypes = {\n  width: PropTypes.string,\n  height: PropTypes.string,\n  fill: PropTypes.string,\n  viewBox: PropTypes.string,\n}\nexport default CheckSvg\n"],"names":["TextArea","Input","_ref","isModalOpen","handleCancel","handleApprove","id","headContent","resetFunc","remarks","setRemarks","useState","loading","setLoadings","_jsxs","Modal","title","concat","open","onOk","async","status","error","okText","onCancel","okButtonProps","style","background","borderColor","color","maskClosable","children","_jsx","variant","value","onChange","e","test","handleRemark","target","className","width","fontSize","padding","placeholder","autoSize","minRows","maxRows","loadings","formErrors","setFormErrors","validateForm","errors","disabled","trim","RangePicker","DatePicker","formatDate","productLists","prodLoader","api","useAxios","memberTable","setMemberTable","selectedRows","setSelectedRows","productList","setProductList","memberList","setMemberList","headerLabel","setHeaderLabel","rangePickerRef","useRef","setIsModalOpen","singleId","setSingleId","commonLoader","setCommonLoader","rejectStatus","setRejectStatus","openSelectAll","setOpenSelectAll","approvedStatusAll","setApprovedStatusAll","openSelectRejectAll","setOpenSelectRejectAll","singleApprovedId","setSingleApprovedId","approvedStatus","setApprovedStatus","setOpen","selectRef","mLoader","setMLoader","pLoader","setPLoader","startDateRef","endDateRef","pageRef","productIdRef","memberIdRef","filterRef","hasMoreRef","abortController","setAbortController","AbortController","showPopconfirmAll","useEffect","current","getProductActivityall","tableContainer","document","querySelector","addEventListener","handleScroll","removeEventListener","scrollTop","clientHeight","scrollHeight","handleHeaderCheck","isChecked","allRowIds","map","row","length","handleButtonClick","remarksValue","statuschange","toast","position","POSITION","BOTTOM_RIGHT","autoClose","getProductMemberActivitywithdatewise","formDate","todate","formattedFromDate","dayjs","format","formattedToDate","url","response","get","headers","getHeaders","members","data","memberNames","products","productNames","newAbortController","abort","_newAbortController","getUrl","signal","prevUserData","uniqueSet","Set","user","newData","filter","has","loaderContent","CSpinner","statusValue","formData","FormData","append","put","message","success","Error","resetFormValues","options","product","label","name","handleProduct","undefined","member","handleProductList","blur","memberOption","src","profile_pic","ImageUrl","profileImage1","alt","marginLeft","toPascalCase","role","_Fragment","CRow","CCol","sm","Breadcrumb","separator","items","Link","rel","to","cursor","ref","marginRight","date","disabledDate","endOf","Select","suffixIcon","Downarrowimg","height","find","option","showSearch","allowClear","filterOption","input","toLowerCase","indexOf","textAlign","Array","from","_","index","Skeleton","paragraph","rows","getPopupContainer","triggerNode","parentNode","handleMember","avatar","size","userName","props","lowerCaseInput","includes","popupMatchSelectWidth","popupClassName","border","InfiniteScroll","dataLength","next","hasMore","loader","endMessage","CTable","CTableHead","CTableRow","CTableHeaderCell","Checkbox","checked","colSpan","display","alignItems","justifyContent","type","onClick","CheckSvg","viewBox","fill","CrossSvg","scope","top","zIndex","CTableBody","CTableDataCell","approved","handleMemberCheck","rowId","prevSelectedRows","selectedId","newSelectedRowCount","activity_date","productName","assignedStatus","taskName","formatTimeDuration","hours","description","showPopconfirm","showModal","RejectConfirmModal","ApprovedConfirmModal","handleApproveCancel","handleApproveCancelAll","handleRejectCancelAll","dateRef","statusRef","getMemberActivityall","handleDateChange","dateString","formattedDate","dropdownRender","menu","maxHeight","overflow","handleStatus","task_user_name","supervisor_approved","ContractMembersActivity","activeKey","setActiveKey","setProdLoader","getproductList","then","catch","Date","toLocaleDateString","day","month","year","replace","ToastContainer","xs","CCard","CNav","CNavItem","CNavLink","active","component","CTabContent","CTabPane","visible","PendingActivity","ClosedActivity","xmlns","d","stroke","strokeWidth"],"sourceRoot":""}